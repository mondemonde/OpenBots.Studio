/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAccessRequestsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides all the access requests for the given Organization Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>AccessRequest</returns>
        AccessRequest ApiV1OrganizationsOrganizationIdAccessRequestsGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides all the access requests for the given Organization Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>ApiResponse of AccessRequest</returns>
        ApiResponse<AccessRequest> ApiV1OrganizationsOrganizationIdAccessRequestsGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut (string organizationId, string id);

        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutWithHttpInfo (string organizationId, string id);
        /// <summary>
        /// Deletes access request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete (string id, string organizationId);

        /// <summary>
        /// Deletes access request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteWithHttpInfo (string id, string organizationId);
        /// <summary>
        /// Updates partial details of Access request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch (string id, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of Access request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchWithHttpInfo (string id, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Update the access request
        /// </summary>
        /// <remarks>
        /// Updates the access request with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdPut (string organizationId, string id, AccessRequest body = null);

        /// <summary>
        /// Update the access request
        /// </summary>
        /// <remarks>
        /// Updates the access request with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdPutWithHttpInfo (string organizationId, string id, AccessRequest body = null);
        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut (string organizationId, string id);

        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutWithHttpInfo (string organizationId, string id);
        /// <summary>
        /// Pending Access Requests
        /// </summary>
        /// <remarks>
        /// Provides the paginated pending access requests for the organization.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>PendingAccessRequestPaginatedList</returns>
        PendingAccessRequestPaginatedList ApiV1OrganizationsOrganizationIdAccessRequestsPendingGet (string organizationId);

        /// <summary>
        /// Pending Access Requests
        /// </summary>
        /// <remarks>
        /// Provides the paginated pending access requests for the organization.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>ApiResponse of PendingAccessRequestPaginatedList</returns>
        ApiResponse<PendingAccessRequestPaginatedList> ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetWithHttpInfo (string organizationId);
        /// <summary>
        /// Adds a new access request for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>AccessRequest</returns>
        AccessRequest ApiV1OrganizationsOrganizationIdAccessRequestsPost (string organizationId, AccessRequest body = null);

        /// <summary>
        /// Adds a new access request for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>ApiResponse of AccessRequest</returns>
        ApiResponse<AccessRequest> ApiV1OrganizationsOrganizationIdAccessRequestsPostWithHttpInfo (string organizationId, AccessRequest body = null);
        /// <summary>
        /// Get the access requests for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>AccessRequest</returns>
        AccessRequest GetAccessRequest (string organizationId, string id);

        /// <summary>
        /// Get the access requests for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>ApiResponse of AccessRequest</returns>
        ApiResponse<AccessRequest> GetAccessRequestWithHttpInfo (string organizationId, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides all the access requests for the given Organization Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of AccessRequest</returns>
        System.Threading.Tasks.Task<AccessRequest> ApiV1OrganizationsOrganizationIdAccessRequestsGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides all the access requests for the given Organization Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AccessRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessRequest>> ApiV1OrganizationsOrganizationIdAccessRequestsGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutAsync (string organizationId, string id);

        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutAsyncWithHttpInfo (string organizationId, string id);
        /// <summary>
        /// Deletes access request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteAsync (string id, string organizationId);

        /// <summary>
        /// Deletes access request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteAsyncWithHttpInfo (string id, string organizationId);
        /// <summary>
        /// Updates partial details of Access request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchAsync (string id, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of Access request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchAsyncWithHttpInfo (string id, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Update the access request
        /// </summary>
        /// <remarks>
        /// Updates the access request with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdPutAsync (string organizationId, string id, AccessRequest body = null);

        /// <summary>
        /// Update the access request
        /// </summary>
        /// <remarks>
        /// Updates the access request with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdPutAsyncWithHttpInfo (string organizationId, string id, AccessRequest body = null);
        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutAsync (string organizationId, string id);

        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutAsyncWithHttpInfo (string organizationId, string id);
        /// <summary>
        /// Pending Access Requests
        /// </summary>
        /// <remarks>
        /// Provides the paginated pending access requests for the organization.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>Task of PendingAccessRequestPaginatedList</returns>
        System.Threading.Tasks.Task<PendingAccessRequestPaginatedList> ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetAsync (string organizationId);

        /// <summary>
        /// Pending Access Requests
        /// </summary>
        /// <remarks>
        /// Provides the paginated pending access requests for the organization.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>Task of ApiResponse (PendingAccessRequestPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingAccessRequestPaginatedList>> ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetAsyncWithHttpInfo (string organizationId);
        /// <summary>
        /// Adds a new access request for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>Task of AccessRequest</returns>
        System.Threading.Tasks.Task<AccessRequest> ApiV1OrganizationsOrganizationIdAccessRequestsPostAsync (string organizationId, AccessRequest body = null);

        /// <summary>
        /// Adds a new access request for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>Task of ApiResponse (AccessRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessRequest>> ApiV1OrganizationsOrganizationIdAccessRequestsPostAsyncWithHttpInfo (string organizationId, AccessRequest body = null);
        /// <summary>
        /// Get the access requests for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>Task of AccessRequest</returns>
        System.Threading.Tasks.Task<AccessRequest> GetAccessRequestAsync (string organizationId, string id);

        /// <summary>
        /// Get the access requests for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>Task of ApiResponse (AccessRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessRequest>> GetAccessRequestAsyncWithHttpInfo (string organizationId, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AccessRequestsApi : IAccessRequestsApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccessRequestsApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessRequestsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AccessRequestsApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccessRequestsApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides all the access requests for the given Organization Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>AccessRequest</returns>
        public AccessRequest ApiV1OrganizationsOrganizationIdAccessRequestsGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AccessRequest> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsGetWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides all the access requests for the given Organization Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>ApiResponse of AccessRequest</returns>
        public ApiResponse< AccessRequest > ApiV1OrganizationsOrganizationIdAccessRequestsGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessRequest)));
        }

        /// <summary>
        /// Provides all the access requests for the given Organization Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of AccessRequest</returns>
        public async System.Threading.Tasks.Task<AccessRequest> ApiV1OrganizationsOrganizationIdAccessRequestsGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AccessRequest> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsGetAsyncWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides all the access requests for the given Organization Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first &#x27;n&#x27; number of rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AccessRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessRequest>> ApiV1OrganizationsOrganizationIdAccessRequestsGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessRequest)));
        }

        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut (string organizationId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutWithHttpInfo(organizationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}/Approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutAsync (string organizationId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutAsyncWithHttpInfo(organizationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Approves the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The identifier.</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePutAsyncWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}/Approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdApprovePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes access request 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete (string id, string organizationId)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteWithHttpInfo(id, organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes access request 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteWithHttpInfo (string id, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes access request 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteAsync (string id, string organizationId)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteAsyncWithHttpInfo(id, organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes access request 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier.</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdDeleteAsyncWithHttpInfo (string id, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of Access request. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch (string id, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchWithHttpInfo(id, organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of Access request. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchWithHttpInfo (string id, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of Access request. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchAsync (string id, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchAsyncWithHttpInfo(id, organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of Access request. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Access request identifier</param>
        /// <param name="organizationId"></param>
        /// <param name="body">details of Access request to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdPatchAsyncWithHttpInfo (string id, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the access request Updates the access request with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdPut (string organizationId, string id, AccessRequest body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsIdPutWithHttpInfo(organizationId, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the access request Updates the access request with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdAccessRequestsIdPutWithHttpInfo (string organizationId, string id, AccessRequest body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the access request Updates the access request with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdPutAsync (string organizationId, string id, AccessRequest body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsIdPutAsyncWithHttpInfo(organizationId, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the access request Updates the access request with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">access request Id</param>
        /// <param name="body">new value of the access request to be updated . (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdPutAsyncWithHttpInfo (string organizationId, string id, AccessRequest body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut (string organizationId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutWithHttpInfo(organizationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}/Reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutAsync (string organizationId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutAsyncWithHttpInfo(organizationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rejects the specified AccessRequest by an Organization Administrator. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="id">The Access Request identifier.</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPutAsyncWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}/Reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsIdRejectPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Pending Access Requests Provides the paginated pending access requests for the organization.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>PendingAccessRequestPaginatedList</returns>
        public PendingAccessRequestPaginatedList ApiV1OrganizationsOrganizationIdAccessRequestsPendingGet (string organizationId)
        {
             ApiResponse<PendingAccessRequestPaginatedList> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pending Access Requests Provides the paginated pending access requests for the organization.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>ApiResponse of PendingAccessRequestPaginatedList</returns>
        public ApiResponse< PendingAccessRequestPaginatedList > ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsPendingGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/Pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsPendingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingAccessRequestPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PendingAccessRequestPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingAccessRequestPaginatedList)));
        }

        /// <summary>
        /// Pending Access Requests Provides the paginated pending access requests for the organization.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>Task of PendingAccessRequestPaginatedList</returns>
        public async System.Threading.Tasks.Task<PendingAccessRequestPaginatedList> ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetAsync (string organizationId)
        {
             ApiResponse<PendingAccessRequestPaginatedList> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pending Access Requests Provides the paginated pending access requests for the organization.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <returns>Task of ApiResponse (PendingAccessRequestPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingAccessRequestPaginatedList>> ApiV1OrganizationsOrganizationIdAccessRequestsPendingGetAsyncWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsPendingGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/Pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsPendingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingAccessRequestPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PendingAccessRequestPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingAccessRequestPaginatedList)));
        }

        /// <summary>
        /// Adds a new access request for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>AccessRequest</returns>
        public AccessRequest ApiV1OrganizationsOrganizationIdAccessRequestsPost (string organizationId, AccessRequest body = null)
        {
             ApiResponse<AccessRequest> localVarResponse = ApiV1OrganizationsOrganizationIdAccessRequestsPostWithHttpInfo(organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new access request for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>ApiResponse of AccessRequest</returns>
        public ApiResponse< AccessRequest > ApiV1OrganizationsOrganizationIdAccessRequestsPostWithHttpInfo (string organizationId, AccessRequest body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessRequest)));
        }

        /// <summary>
        /// Adds a new access request for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>Task of AccessRequest</returns>
        public async System.Threading.Tasks.Task<AccessRequest> ApiV1OrganizationsOrganizationIdAccessRequestsPostAsync (string organizationId, AccessRequest body = null)
        {
             ApiResponse<AccessRequest> localVarResponse = await ApiV1OrganizationsOrganizationIdAccessRequestsPostAsyncWithHttpInfo(organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new access request for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Access Request details (optional)</param>
        /// <returns>Task of ApiResponse (AccessRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessRequest>> ApiV1OrganizationsOrganizationIdAccessRequestsPostAsyncWithHttpInfo (string organizationId, AccessRequest body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->ApiV1OrganizationsOrganizationIdAccessRequestsPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdAccessRequestsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessRequest)));
        }

        /// <summary>
        /// Get the access requests for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>AccessRequest</returns>
        public AccessRequest GetAccessRequest (string organizationId, string id)
        {
             ApiResponse<AccessRequest> localVarResponse = GetAccessRequestWithHttpInfo(organizationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the access requests for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>ApiResponse of AccessRequest</returns>
        public ApiResponse< AccessRequest > GetAccessRequestWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->GetAccessRequest");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->GetAccessRequest");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessRequest)));
        }

        /// <summary>
        /// Get the access requests for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>Task of AccessRequest</returns>
        public async System.Threading.Tasks.Task<AccessRequest> GetAccessRequestAsync (string organizationId, string id)
        {
             ApiResponse<AccessRequest> localVarResponse = await GetAccessRequestAsyncWithHttpInfo(organizationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the access requests for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Access Request Identifier.</param>
        /// <returns>Task of ApiResponse (AccessRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessRequest>> GetAccessRequestAsyncWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccessRequestsApi->GetAccessRequest");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccessRequestsApi->GetAccessRequest");

            var localVarPath = "/api/v1/Organizations/{organizationId}/AccessRequests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccessRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessRequest)));
        }

    }
}
