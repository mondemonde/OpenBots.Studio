/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new heartbeat for the specified AgentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>AgentHeartbeat</returns>
        AgentHeartbeat ApiV1AgentsAgentIdAddHeartbeatPost(string agentId, AgentHeartbeat body = null);

        /// <summary>
        /// Creates a new heartbeat for the specified AgentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>ApiResponse of AgentHeartbeat</returns>
        ApiResponse<AgentHeartbeat> ApiV1AgentsAgentIdAddHeartbeatPostWithHttpInfo(string agentId, AgentHeartbeat body = null);
        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>ConnectedViewModel</returns>
        ConnectedViewModel ApiV1AgentsConnectPatch(string agentID, string machineName, string macAddresses);

        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>ApiResponse of ConnectedViewModel</returns>
        ApiResponse<ConnectedViewModel> ApiV1AgentsConnectPatchWithHttpInfo(string agentID, string machineName, string macAddresses);
        /// <summary>
        /// Provides a count of agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        int? ApiV1AgentsCountGet(string filter = null);

        /// <summary>
        /// Provides a count of agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> ApiV1AgentsCountGetWithHttpInfo(string filter = null);
        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AgentsDisconnectPatch(string agentID, string machineName, string macAddresses);

        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AgentsDisconnectPatchWithHttpInfo(string agentID, string machineName, string macAddresses);
        /// <summary>
        /// Provides a list of all Agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AgentModelPaginatedList</returns>
        AgentModelPaginatedList ApiV1AgentsGet(string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AgentModelPaginatedList</returns>
        ApiResponse<AgentModelPaginatedList> ApiV1AgentsGetWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Lookup list of all agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobAgentsLookup&gt;</returns>
        List<JobAgentsLookup> ApiV1AgentsGetLookupGet();

        /// <summary>
        /// Lookup list of all agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobAgentsLookup&gt;</returns>
        ApiResponse<List<JobAgentsLookup>> ApiV1AgentsGetLookupGetWithHttpInfo();
        /// <summary>
        /// Deletes an agent with a specified id from the agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AgentsIdDelete(string id);

        /// <summary>
        /// Deletes an agent with a specified id from the agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AgentsIdDeleteWithHttpInfo(string id);
        /// <summary>
        /// Updates partial details of agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AgentsIdPatch(string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AgentsIdPatchWithHttpInfo(string id, List<Operation> body = null);
        /// <summary>
        /// Updates an Agent
        /// </summary>
        /// <remarks>
        /// Provides an action to update an agent, when agent id and the new details of agent are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AgentsIdPut(string id, AgentModel body = null);

        /// <summary>
        /// Updates an Agent
        /// </summary>
        /// <remarks>
        /// Provides an action to update an agent, when agent id and the new details of agent are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AgentsIdPutWithHttpInfo(string id, AgentModel body = null);
        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user
        /// </summary>
        /// <remarks>
        /// Adds the agent with unique agent id to the existing agents
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentModel</returns>
        AgentModel ApiV1AgentsPost(CreateAgentViewModel body = null);

        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user
        /// </summary>
        /// <remarks>
        /// Adds the agent with unique agent id to the existing agents
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentModel</returns>
        ApiResponse<AgentModel> ApiV1AgentsPostWithHttpInfo(CreateAgentViewModel body = null);
        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent id</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AgentHeartbeatPaginatedList</returns>
        AgentHeartbeatPaginatedList GetAgentHeartbeat(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent id</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AgentHeartbeatPaginatedList</returns>
        ApiResponse<AgentHeartbeatPaginatedList> GetAgentHeartbeatWithHttpInfo(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AgentViewModel</returns>
        AgentViewModel GetAgentModel(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AgentViewModel</returns>
        ApiResponse<AgentViewModel> GetAgentModelWithHttpInfo(string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new heartbeat for the specified AgentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>Task of AgentHeartbeat</returns>
        System.Threading.Tasks.Task<AgentHeartbeat> ApiV1AgentsAgentIdAddHeartbeatPostAsync(string agentId, AgentHeartbeat body = null);

        /// <summary>
        /// Creates a new heartbeat for the specified AgentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>Task of ApiResponse (AgentHeartbeat)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentHeartbeat>> ApiV1AgentsAgentIdAddHeartbeatPostAsyncWithHttpInfo(string agentId, AgentHeartbeat body = null);
        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>Task of ConnectedViewModel</returns>
        System.Threading.Tasks.Task<ConnectedViewModel> ApiV1AgentsConnectPatchAsync(string machineName, string macAddresses);

        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>Task of ApiResponse (ConnectedViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectedViewModel>> ApiV1AgentsConnectPatchAsyncWithHttpInfo(string machineName, string macAddresses);
        /// <summary>
        /// Provides a count of agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> ApiV1AgentsCountGetAsync(string filter = null);

        /// <summary>
        /// Provides a count of agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1AgentsCountGetAsyncWithHttpInfo(string filter = null);
        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <param name="agentId"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AgentsDisconnectPatchAsync(string machineName, string macAddresses, Guid? agentId = null);

        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <param name="agentId"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsDisconnectPatchAsyncWithHttpInfo(string machineName, string macAddresses, Guid? agentId = null);
        /// <summary>
        /// Provides a list of all Agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AgentModelPaginatedList</returns>
        System.Threading.Tasks.Task<AgentModelPaginatedList> ApiV1AgentsGetAsync(string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AgentModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentModelPaginatedList>> ApiV1AgentsGetAsyncWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Lookup list of all agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;JobAgentsLookup&gt;</returns>
        System.Threading.Tasks.Task<List<JobAgentsLookup>> ApiV1AgentsGetLookupGetAsync();

        /// <summary>
        /// Lookup list of all agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;JobAgentsLookup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobAgentsLookup>>> ApiV1AgentsGetLookupGetAsyncWithHttpInfo();
        /// <summary>
        /// Deletes an agent with a specified id from the agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AgentsIdDeleteAsync(string id);

        /// <summary>
        /// Deletes an agent with a specified id from the agents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsIdDeleteAsyncWithHttpInfo(string id);
        /// <summary>
        /// Updates partial details of agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AgentsIdPatchAsync(string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsIdPatchAsyncWithHttpInfo(string id, List<Operation> body = null);
        /// <summary>
        /// Updates an Agent
        /// </summary>
        /// <remarks>
        /// Provides an action to update an agent, when agent id and the new details of agent are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AgentsIdPutAsync(string id, AgentModel body = null);

        /// <summary>
        /// Updates an Agent
        /// </summary>
        /// <remarks>
        /// Provides an action to update an agent, when agent id and the new details of agent are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsIdPutAsyncWithHttpInfo(string id, AgentModel body = null);
        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user
        /// </summary>
        /// <remarks>
        /// Adds the agent with unique agent id to the existing agents
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentModel</returns>
        System.Threading.Tasks.Task<AgentModel> ApiV1AgentsPostAsync(CreateAgentViewModel body = null);

        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user
        /// </summary>
        /// <remarks>
        /// Adds the agent with unique agent id to the existing agents
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentModel>> ApiV1AgentsPostAsyncWithHttpInfo(CreateAgentViewModel body = null);
        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent id</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AgentHeartbeatPaginatedList</returns>
        System.Threading.Tasks.Task<AgentHeartbeatPaginatedList> GetAgentHeartbeatAsync(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent id</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AgentHeartbeatPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentHeartbeatPaginatedList>> GetAgentHeartbeatAsyncWithHttpInfo(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AgentViewModel</returns>
        System.Threading.Tasks.Task<AgentViewModel> GetAgentModelAsync(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AgentViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentViewModel>> GetAgentModelAsyncWithHttpInfo(string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgentsApi : IAgentsApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgentsApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AgentsApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgentsApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new heartbeat for the specified AgentId 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>AgentHeartbeat</returns>
        public AgentHeartbeat ApiV1AgentsAgentIdAddHeartbeatPost(string agentId, AgentHeartbeat body = null)
        {
            ApiResponse<AgentHeartbeat> localVarResponse = ApiV1AgentsAgentIdAddHeartbeatPostWithHttpInfo(agentId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new heartbeat for the specified AgentId 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>ApiResponse of AgentHeartbeat</returns>
        public ApiResponse<AgentHeartbeat> ApiV1AgentsAgentIdAddHeartbeatPostWithHttpInfo(string agentId, AgentHeartbeat body = null)
        {
            // verify the required parameter 'agentId' is set
            if (agentId == null)
                throw new ApiException(400, "Missing required parameter 'agentId' when calling AgentsApi->ApiV1AgentsAgentIdAddHeartbeatPost");
            
            var localVarPath = "/api/v1/Agents/{AgentId}/AddHeartbeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (agentId != null) localVarPathParams.Add("AgentId", this.Configuration.ApiClient.ParameterToString(agentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsAgentIdAddHeartbeatPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentHeartbeat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentHeartbeat)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentHeartbeat)));
        }

        /// <summary>
        /// Creates a new heartbeat for the specified AgentId 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>Task of AgentHeartbeat</returns>
        public async System.Threading.Tasks.Task<AgentHeartbeat> ApiV1AgentsAgentIdAddHeartbeatPostAsync(string agentId, AgentHeartbeat body = null)
        {
            ApiResponse<AgentHeartbeat> localVarResponse = await ApiV1AgentsAgentIdAddHeartbeatPostAsyncWithHttpInfo(agentId, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new heartbeat for the specified AgentId 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent identifier</param>
        /// <param name="body">Heartbeat values to be updated (optional)</param>
        /// <returns>Task of ApiResponse (AgentHeartbeat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentHeartbeat>> ApiV1AgentsAgentIdAddHeartbeatPostAsyncWithHttpInfo(string agentId, AgentHeartbeat body = null)
        {
            // verify the required parameter 'agentId' is set
            if (agentId == null)
                throw new ApiException(400, "Missing required parameter 'agentId' when calling AgentsApi->ApiV1AgentsAgentIdAddHeartbeatPost");
            
            var localVarPath = "/api/v1/Agents/{AgentId}/AddHeartbeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentId != null) localVarPathParams.Add("agentId", this.Configuration.ApiClient.ParameterToString(agentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsAgentIdAddHeartbeatPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentHeartbeat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentHeartbeat)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentHeartbeat)));
        }

        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>ConnectedViewModel</returns>
        public ConnectedViewModel ApiV1AgentsConnectPatch(string agentID, string machineName, string macAddresses)
        {
            ApiResponse<ConnectedViewModel> localVarResponse = ApiV1AgentsConnectPatchWithHttpInfo(agentID, machineName, macAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>ApiResponse of ConnectedViewModel</returns>
        public ApiResponse<ConnectedViewModel> ApiV1AgentsConnectPatchWithHttpInfo(string agentID, string machineName, string macAddresses)
        {
            // verify the required parameter 'agentID' is set
            if (agentID == null)
                throw new ApiException(400, "Missing required parameter 'agentID' when calling AgentsApi->ApiV1AgentsConnectPatch");
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling AgentsApi->ApiV1AgentsConnectPatch");
            // verify the required parameter 'macAddresses' is set
            if (macAddresses == null)
                throw new ApiException(400, "Missing required parameter 'macAddresses' when calling AgentsApi->ApiV1AgentsConnectPatch");
            
            var localVarPath = "/api/v1/Agents/{agentID}/Connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (agentID != null) localVarPathParams.Add("agentID", this.Configuration.ApiClient.ParameterToString(agentID)); // path parameter
            if (machineName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MachineName", machineName)); // query parameter
            if (macAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MacAddresses", macAddresses)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsConnectPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectedViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectedViewModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectedViewModel)));
        }

        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>Task of ConnectedViewModel</returns>
        public async System.Threading.Tasks.Task<ConnectedViewModel> ApiV1AgentsConnectPatchAsync(string machineName, string macAddresses)
        {
            ApiResponse<ConnectedViewModel> localVarResponse = await ApiV1AgentsConnectPatchAsyncWithHttpInfo(machineName, macAddresses);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides an agent id and name if the provided machine matches an agent and updates the isConnected field 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>Task of ApiResponse (ConnectedViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectedViewModel>> ApiV1AgentsConnectPatchAsyncWithHttpInfo(string machineName, string macAddresses)
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling AgentsApi->ApiV1AgentsConnectPatch");
            // verify the required parameter 'macAddresses' is set
            if (macAddresses == null)
                throw new ApiException(400, "Missing required parameter 'macAddresses' when calling AgentsApi->ApiV1AgentsConnectPatch");
            
            var localVarPath = "/api/v1/Agents/Connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (machineName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MachineName", machineName)); // query parameter
            if (macAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MacAddresses", macAddresses)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsConnectPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectedViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConnectedViewModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectedViewModel)));
        }

        /// <summary>
        /// Provides a count of agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        public int? ApiV1AgentsCountGet(string filter = null)
        {
            ApiResponse<int?> localVarResponse = ApiV1AgentsCountGetWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a count of agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse<int?> ApiV1AgentsCountGetWithHttpInfo(string filter = null)
        {
            var localVarPath = "/api/v1/Agents/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a count of agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> ApiV1AgentsCountGetAsync(string filter = null)
        {
            ApiResponse<int?> localVarResponse = await ApiV1AgentsCountGetAsyncWithHttpInfo(filter);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a count of agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1AgentsCountGetAsyncWithHttpInfo(string filter = null)
        {
            var localVarPath = "/api/v1/Agents/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AgentsDisconnectPatch(string agentID, string machineName, string macAddresses)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AgentsDisconnectPatchWithHttpInfo(agentID, machineName, macAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentID"></param>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AgentsDisconnectPatchWithHttpInfo(string agentID, string machineName, string macAddresses)
        {
            // verify the required parameter 'agentID' is set
            if (agentID == null)
                throw new ApiException(400, "Missing required parameter 'agentID' when calling AgentsApi->ApiV1AgentsDisconnectPatch");
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling AgentsApi->ApiV1AgentsDisconnectPatch");
            // verify the required parameter 'macAddresses' is set
            if (macAddresses == null)
                throw new ApiException(400, "Missing required parameter 'macAddresses' when calling AgentsApi->ApiV1AgentsDisconnectPatch");
            
            var localVarPath = "/api/v1/Agents/{agentID}/Disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (agentID != null) localVarPathParams.Add("agentID", this.Configuration.ApiClient.ParameterToString(agentID)); // path parameter
            if (machineName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MachineName", machineName)); // query parameter
            if (macAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MacAddresses", macAddresses)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsDisconnectPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <param name="agentId"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AgentsDisconnectPatchAsync(string machineName, string macAddresses, Guid? agentId = null)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AgentsDisconnectPatchAsyncWithHttpInfo(machineName, macAddresses, agentId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the isConnected field if the disconnect details are correct 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="macAddresses"></param>
        /// <param name="agentId"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsDisconnectPatchAsyncWithHttpInfo(string machineName, string macAddresses, Guid? agentId = null)
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling AgentsApi->ApiV1AgentsDisconnectPatch");
            // verify the required parameter 'macAddresses' is set
            if (macAddresses == null)
                throw new ApiException(400, "Missing required parameter 'macAddresses' when calling AgentsApi->ApiV1AgentsDisconnectPatch");
            
            var localVarPath = "/api/v1/Agents/Disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (machineName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MachineName", machineName)); // query parameter
            if (macAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MacAddresses", macAddresses)); // query parameter
            if (agentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AgentId", agentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsDisconnectPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Provides a list of all Agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AgentModelPaginatedList</returns>
        public AgentModelPaginatedList ApiV1AgentsGet(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AgentModelPaginatedList> localVarResponse = ApiV1AgentsGetWithHttpInfo(filter, orderby, top, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all Agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AgentModelPaginatedList</returns>
        public ApiResponse<AgentModelPaginatedList> ApiV1AgentsGetWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            var localVarPath = "/api/v1/Agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentModelPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentModelPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all Agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AgentModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AgentModelPaginatedList> ApiV1AgentsGetAsync(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AgentModelPaginatedList> localVarResponse = await ApiV1AgentsGetAsyncWithHttpInfo(filter, orderby, top, skip);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all Agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AgentModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentModelPaginatedList>> ApiV1AgentsGetAsyncWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            var localVarPath = "/api/v1/Agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentModelPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentModelPaginatedList)));
        }

        /// <summary>
        /// Lookup list of all agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobAgentsLookup&gt;</returns>
        public List<JobAgentsLookup> ApiV1AgentsGetLookupGet()
        {
            ApiResponse<List<JobAgentsLookup>> localVarResponse = ApiV1AgentsGetLookupGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup list of all agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobAgentsLookup&gt;</returns>
        public ApiResponse<List<JobAgentsLookup>> ApiV1AgentsGetLookupGetWithHttpInfo()
        {
            var localVarPath = "/api/v1/Agents/GetLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsGetLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobAgentsLookup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobAgentsLookup>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobAgentsLookup>)));
        }

        /// <summary>
        /// Lookup list of all agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;JobAgentsLookup&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobAgentsLookup>> ApiV1AgentsGetLookupGetAsync()
        {
            ApiResponse<List<JobAgentsLookup>> localVarResponse = await ApiV1AgentsGetLookupGetAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Lookup list of all agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;JobAgentsLookup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobAgentsLookup>>> ApiV1AgentsGetLookupGetAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/Agents/GetLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsGetLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobAgentsLookup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobAgentsLookup>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobAgentsLookup>)));
        }

        /// <summary>
        /// Deletes an agent with a specified id from the agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AgentsIdDelete(string id)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AgentsIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an agent with a specified id from the agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AgentsIdDeleteWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->ApiV1AgentsIdDelete");
            
            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes an agent with a specified id from the agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AgentsIdDeleteAsync(string id)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AgentsIdDeleteAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an agent with a specified id from the agents 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id to be deleted - throws bad request if null or empty Guid</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsIdDeleteAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->ApiV1AgentsIdDelete");
            
            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of agent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AgentsIdPatch(string id, List<Operation> body = null)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AgentsIdPatchWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of agent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AgentsIdPatchWithHttpInfo(string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->ApiV1AgentsIdPatch");
            
            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of agent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AgentsIdPatchAsync(string id, List<Operation> body = null)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AgentsIdPatchAsyncWithHttpInfo(id, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of agent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent identifier</param>
        /// <param name="body">Value of the agent to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsIdPatchAsyncWithHttpInfo(string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->ApiV1AgentsIdPatch");
            
            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates an Agent Provides an action to update an agent, when agent id and the new details of agent are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AgentsIdPut(string id, AgentModel body = null)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AgentsIdPutWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an Agent Provides an action to update an agent, when agent id and the new details of agent are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AgentsIdPutWithHttpInfo(string id, AgentModel body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->ApiV1AgentsIdPut");
            
            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates an Agent Provides an action to update an agent, when agent id and the new details of agent are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AgentsIdPutAsync(string id, AgentModel body = null)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AgentsIdPutAsyncWithHttpInfo(id, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an Agent Provides an action to update an agent, when agent id and the new details of agent are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Agent id, produces bad request if id is null or ids don&#x27;t match</param>
        /// <param name="body">Agent details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AgentsIdPutAsyncWithHttpInfo(string id, AgentModel body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->ApiV1AgentsIdPut");
            
            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user Adds the agent with unique agent id to the existing agents
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentModel</returns>
        public AgentModel ApiV1AgentsPost(CreateAgentViewModel body = null)
        {
            ApiResponse<AgentModel> localVarResponse = ApiV1AgentsPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user Adds the agent with unique agent id to the existing agents
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentModel</returns>
        public ApiResponse<AgentModel> ApiV1AgentsPostWithHttpInfo(CreateAgentViewModel body = null)
        {
            var localVarPath = "/api/v1/Agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentModel)));
        }

        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user Adds the agent with unique agent id to the existing agents
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentModel</returns>
        public async System.Threading.Tasks.Task<AgentModel> ApiV1AgentsPostAsync(CreateAgentViewModel body = null)
        {
            ApiResponse<AgentModel> localVarResponse = await ApiV1AgentsPostAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new agent to the existing agents and create a new agent application user Adds the agent with unique agent id to the existing agents
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentModel>> ApiV1AgentsPostAsyncWithHttpInfo(CreateAgentViewModel body = null)
        {
            var localVarPath = "/api/v1/Agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AgentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentModel)));
        }

        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent id</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AgentHeartbeatPaginatedList</returns>
        public AgentHeartbeatPaginatedList GetAgentHeartbeat(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AgentHeartbeatPaginatedList> localVarResponse = GetAgentHeartbeatWithHttpInfo(agentId, filter, orderby, top, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent id</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AgentHeartbeatPaginatedList</returns>
        public ApiResponse<AgentHeartbeatPaginatedList> GetAgentHeartbeatWithHttpInfo(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'agentId' is set
            if (agentId == null)
                throw new ApiException(400, "Missing required parameter 'agentId' when calling AgentsApi->GetAgentHeartbeat");

            var localVarPath = "/api/v1/Agents/{AgentId}/AgentHeartbeats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (agentId != null) localVarPathParams.Add("agentId", this.Configuration.ApiClient.ParameterToString(agentId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentHeartbeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentHeartbeatPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentHeartbeatPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentHeartbeatPaginatedList)));
        }

        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AgentHeartbeatPaginatedList</returns>
        public async System.Threading.Tasks.Task<AgentHeartbeatPaginatedList> GetAgentHeartbeatAsync(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AgentHeartbeatPaginatedList> localVarResponse = await GetAgentHeartbeatAsyncWithHttpInfo(agentId, filter, orderby, top, skip);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of heartbeat details for a particular agent id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId">Agent id</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AgentHeartbeatPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentHeartbeatPaginatedList>> GetAgentHeartbeatAsyncWithHttpInfo(string agentId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'agentId' is set
            if (agentId == null)
                throw new ApiException(400, "Missing required parameter 'agentId' when calling AgentsApi->GetAgentHeartbeat");

            var localVarPath = "/api/v1/Agents/{AgentId}/AgentHeartbeats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentId != null) localVarPathParams.Add("agentId", this.Configuration.ApiClient.ParameterToString(agentId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentHeartbeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentHeartbeatPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentHeartbeatPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentHeartbeatPaginatedList)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AgentViewModel</returns>
        public AgentViewModel GetAgentModel(string id)
        {
            ApiResponse<AgentViewModel> localVarResponse = GetAgentModelWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AgentViewModel</returns>
        public ApiResponse<AgentViewModel> GetAgentModelWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->GetAgentModel");

            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentViewModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentViewModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of AgentViewModel</returns>
        public async System.Threading.Tasks.Task<AgentViewModel> GetAgentModelAsync(string id)
        {
            ApiResponse<AgentViewModel> localVarResponse = await GetAgentModelAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AgentViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentViewModel>> GetAgentModelAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgentsApi->GetAgentModel");

            var localVarPath = "/api/v1/Agents/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgentViewModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentViewModel)));
        }

    }
}
