/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomationExecutionLogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a Count of AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        int? ApiV1AutomationExecutionLogsCountGet(string filter = null);

        /// <summary>
        /// Provides a Count of AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> ApiV1AutomationExecutionLogsCountGetWithHttpInfo(string filter = null);
        /// <summary>
        /// Provides a list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AutomationExecutionLogPaginatedList</returns>
        AutomationExecutionLogPaginatedList ApiV1AutomationExecutionLogsGet(string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AutomationExecutionLogPaginatedList</returns>
        ApiResponse<AutomationExecutionLogPaginatedList> ApiV1AutomationExecutionLogsGetWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AutomationExecutionLogsIdDelete(string id);

        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdDeleteWithHttpInfo(string id);
        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AutomationExecutionLogsIdEndAutomationPut(string id, AutomationExecutionLog body = null);

        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdEndAutomationPutWithHttpInfo(string id, AutomationExecutionLog body = null);
        /// <summary>
        /// Updates partial details of AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AutomationExecutionLogsIdPatch(string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdPatchWithHttpInfo(string id, List<Operation> body = null);
        /// <summary>
        /// Updates a AutomationExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1AutomationExecutionLogsIdPut(string id, AutomationExecutionLog body = null);

        /// <summary>
        /// Updates a AutomationExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdPutWithHttpInfo(string id, AutomationExecutionLog body = null);
        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AutomationExecutionLog</returns>
        AutomationExecutionLog ApiV1AutomationExecutionLogsPost(AutomationExecutionLog body = null);

        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AutomationExecutionLog</returns>
        ApiResponse<AutomationExecutionLog> ApiV1AutomationExecutionLogsPostWithHttpInfo(AutomationExecutionLog body = null);
        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AutomationExecutionLog</returns>
        AutomationExecutionLog ApiV1AutomationExecutionLogsStartAutomationPost(AutomationExecutionLog body = null);

        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AutomationExecutionLog</returns>
        ApiResponse<AutomationExecutionLog> ApiV1AutomationExecutionLogsStartAutomationPostWithHttpInfo(AutomationExecutionLog body = null);
        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AutomationExecutionViewModelPaginatedList</returns>
        AutomationExecutionViewModelPaginatedList ApiV1AutomationExecutionLogsViewGet(string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AutomationExecutionViewModelPaginatedList</returns>
        ApiResponse<AutomationExecutionViewModelPaginatedList> ApiV1AutomationExecutionLogsViewGetWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>AutomationExecutionViewModel</returns>
        AutomationExecutionViewModel ApiV1AutomationExecutionLogsViewIdGet(string id);

        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>ApiResponse of AutomationExecutionViewModel</returns>
        ApiResponse<AutomationExecutionViewModel> ApiV1AutomationExecutionLogsViewIdGetWithHttpInfo(string id);
        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>AutomationExecutionLog</returns>
        AutomationExecutionLog GetAutomationExecutionLog(string id);

        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>ApiResponse of AutomationExecutionLog</returns>
        ApiResponse<AutomationExecutionLog> GetAutomationExecutionLogWithHttpInfo(string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a Count of AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> ApiV1AutomationExecutionLogsCountGetAsync(string filter = null);

        /// <summary>
        /// Provides a Count of AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1AutomationExecutionLogsCountGetAsyncWithHttpInfo(string filter = null);
        /// <summary>
        /// Provides a list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AutomationExecutionLogPaginatedList</returns>
        System.Threading.Tasks.Task<AutomationExecutionLogPaginatedList> ApiV1AutomationExecutionLogsGetAsync(string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLogPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLogPaginatedList>> ApiV1AutomationExecutionLogsGetAsyncWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdDeleteAsync(string id);

        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdDeleteAsyncWithHttpInfo(string id);
        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdEndAutomationPutAsync(string id, AutomationExecutionLog body = null);

        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdEndAutomationPutAsyncWithHttpInfo(string id, AutomationExecutionLog body = null);
        /// <summary>
        /// Updates partial details of AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdPatchAsync(string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of AutomationExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdPatchAsyncWithHttpInfo(string id, List<Operation> body = null);
        /// <summary>
        /// Updates a AutomationExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdPutAsync(string id, AutomationExecutionLog body = null);

        /// <summary>
        /// Updates a AutomationExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdPutAsyncWithHttpInfo(string id, AutomationExecutionLog body = null);
        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AutomationExecutionLog</returns>
        System.Threading.Tasks.Task<AutomationExecutionLog> ApiV1AutomationExecutionLogsPostAsync(AutomationExecutionLog body = null);

        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLog>> ApiV1AutomationExecutionLogsPostAsyncWithHttpInfo(AutomationExecutionLog body = null);
        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AutomationExecutionLog</returns>
        System.Threading.Tasks.Task<AutomationExecutionLog> ApiV1AutomationExecutionLogsStartAutomationPostAsync(AutomationExecutionLog body = null);

        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLog>> ApiV1AutomationExecutionLogsStartAutomationPostAsyncWithHttpInfo(AutomationExecutionLog body = null);
        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AutomationExecutionViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<AutomationExecutionViewModelPaginatedList> ApiV1AutomationExecutionLogsViewGetAsync(string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationExecutionViewModelPaginatedList>> ApiV1AutomationExecutionLogsViewGetAsyncWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>Task of AutomationExecutionViewModel</returns>
        System.Threading.Tasks.Task<AutomationExecutionViewModel> ApiV1AutomationExecutionLogsViewIdGetAsync(string id);

        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>Task of ApiResponse (AutomationExecutionViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationExecutionViewModel>> ApiV1AutomationExecutionLogsViewIdGetAsyncWithHttpInfo(string id);
        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>Task of AutomationExecutionLog</returns>
        System.Threading.Tasks.Task<AutomationExecutionLog> GetAutomationExecutionLogAsync(string id);

        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLog>> GetAutomationExecutionLogAsyncWithHttpInfo(string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutomationExecutionLogsApi : IAutomationExecutionLogsApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationExecutionLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationExecutionLogsApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationExecutionLogsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AutomationExecutionLogsApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationExecutionLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutomationExecutionLogsApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a Count of AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        public int? ApiV1AutomationExecutionLogsCountGet(string filter = null)
        {
            ApiResponse<int?> localVarResponse = ApiV1AutomationExecutionLogsCountGetWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a Count of AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse<int?> ApiV1AutomationExecutionLogsCountGetWithHttpInfo(string filter = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a Count of AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> ApiV1AutomationExecutionLogsCountGetAsync(string filter = null)
        {
            ApiResponse<int?> localVarResponse = await ApiV1AutomationExecutionLogsCountGetAsyncWithHttpInfo(filter);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a Count of AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1AutomationExecutionLogsCountGetAsyncWithHttpInfo(string filter = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AutomationExecutionLogPaginatedList</returns>
        public AutomationExecutionLogPaginatedList ApiV1AutomationExecutionLogsGet(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AutomationExecutionLogPaginatedList> localVarResponse = ApiV1AutomationExecutionLogsGetWithHttpInfo(filter, orderby, top, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AutomationExecutionLogPaginatedList</returns>
        public ApiResponse<AutomationExecutionLogPaginatedList> ApiV1AutomationExecutionLogsGetWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLogPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLogPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AutomationExecutionLogPaginatedList</returns>
        public async System.Threading.Tasks.Task<AutomationExecutionLogPaginatedList> ApiV1AutomationExecutionLogsGetAsync(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AutomationExecutionLogPaginatedList> localVarResponse = await ApiV1AutomationExecutionLogsGetAsyncWithHttpInfo(filter, orderby, top, skip);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLogPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLogPaginatedList>> ApiV1AutomationExecutionLogsGetAsyncWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLogPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLogPaginatedList)));
        }

        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AutomationExecutionLogsIdDelete(string id)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AutomationExecutionLogsIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdDeleteWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdDelete");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdDeleteAsync(string id)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AutomationExecutionLogsIdDeleteAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a AutomationExecutionLog with a specified id from the AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdDeleteAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdDelete");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AutomationExecutionLogsIdEndAutomationPut(string id, AutomationExecutionLog body = null)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AutomationExecutionLogsIdEndAutomationPutWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdEndAutomationPutWithHttpInfo(string id, AutomationExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdEndAutomationPut");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}/EndAutomation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdEndAutomationPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdEndAutomationPutAsync(string id, AutomationExecutionLog body = null)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AutomationExecutionLogsIdEndAutomationPutAsyncWithHttpInfo(id, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Agent is able to update a AutomationExecutionLog End status Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdEndAutomationPutAsyncWithHttpInfo(string id, AutomationExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdEndAutomationPut");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}/EndAutomation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdEndAutomationPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AutomationExecutionLogsIdPatch(string id, List<Operation> body = null)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AutomationExecutionLogsIdPatchWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdPatchWithHttpInfo(string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdPatch");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdPatchAsync(string id, List<Operation> body = null)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AutomationExecutionLogsIdPatchAsyncWithHttpInfo(id, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of AutomationExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog identifier</param>
        /// <param name="body">Value of the AutomationExecutionLog to be updated. (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdPatchAsyncWithHttpInfo(string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdPatch");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates a AutomationExecutionLog Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1AutomationExecutionLogsIdPut(string id, AutomationExecutionLog body = null)
        {
            ApiResponse<IActionResult> localVarResponse = ApiV1AutomationExecutionLogsIdPutWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a AutomationExecutionLog Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse<IActionResult> ApiV1AutomationExecutionLogsIdPutWithHttpInfo(string id, AutomationExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdPut");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates a AutomationExecutionLog Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1AutomationExecutionLogsIdPutAsync(string id, AutomationExecutionLog body = null)
        {
            ApiResponse<IActionResult> localVarResponse = await ApiV1AutomationExecutionLogsIdPutAsyncWithHttpInfo(id, body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a AutomationExecutionLog Provides an action to update a AutomationExecutionLog, when AutomationExecutionLog id and the new details of AutomationExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">AutomationExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1AutomationExecutionLogsIdPutAsyncWithHttpInfo(string id, AutomationExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsIdPut");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AutomationExecutionLog</returns>
        public AutomationExecutionLog ApiV1AutomationExecutionLogsPost(AutomationExecutionLog body = null)
        {
            ApiResponse<AutomationExecutionLog> localVarResponse = ApiV1AutomationExecutionLogsPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AutomationExecutionLog</returns>
        public ApiResponse<AutomationExecutionLog> ApiV1AutomationExecutionLogsPostWithHttpInfo(AutomationExecutionLog body = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLog)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLog)));
        }

        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AutomationExecutionLog</returns>
        public async System.Threading.Tasks.Task<AutomationExecutionLog> ApiV1AutomationExecutionLogsPostAsync(AutomationExecutionLog body = null)
        {
            ApiResponse<AutomationExecutionLog> localVarResponse = await ApiV1AutomationExecutionLogsPostAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new AutomationExecutionLog to the existing AutomationExecutionLogs Adds the AutomationExecutionLog with unique AutomationExecutionLog Id to the existing AutomationExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLog>> ApiV1AutomationExecutionLogsPostAsyncWithHttpInfo(AutomationExecutionLog body = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLog)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLog)));
        }

        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AutomationExecutionLog</returns>
        public AutomationExecutionLog ApiV1AutomationExecutionLogsStartAutomationPost(AutomationExecutionLog body = null)
        {
            ApiResponse<AutomationExecutionLog> localVarResponse = ApiV1AutomationExecutionLogsStartAutomationPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AutomationExecutionLog</returns>
        public ApiResponse<AutomationExecutionLog> ApiV1AutomationExecutionLogsStartAutomationPostWithHttpInfo(AutomationExecutionLog body = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/StartAutomation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsStartAutomationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLog)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLog)));
        }

        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AutomationExecutionLog</returns>
        public async System.Threading.Tasks.Task<AutomationExecutionLog> ApiV1AutomationExecutionLogsStartAutomationPostAsync(AutomationExecutionLog body = null)
        {
            ApiResponse<AutomationExecutionLog> localVarResponse = await ApiV1AutomationExecutionLogsStartAutomationPostAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Allows Agent to add a new AutomationExecutionLog to the existing AutomationExecutionLogs Agent is able to Add the AutomationExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLog>> ApiV1AutomationExecutionLogsStartAutomationPostAsyncWithHttpInfo(AutomationExecutionLog body = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/StartAutomation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsStartAutomationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLog)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLog)));
        }

        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AutomationExecutionViewModelPaginatedList</returns>
        public AutomationExecutionViewModelPaginatedList ApiV1AutomationExecutionLogsViewGet(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AutomationExecutionViewModelPaginatedList> localVarResponse = ApiV1AutomationExecutionLogsViewGetWithHttpInfo(filter, orderby, top, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AutomationExecutionViewModelPaginatedList</returns>
        public ApiResponse<AutomationExecutionViewModelPaginatedList> ApiV1AutomationExecutionLogsViewGetWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionViewModelPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AutomationExecutionViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AutomationExecutionViewModelPaginatedList> ApiV1AutomationExecutionLogsViewGetAsync(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            ApiResponse<AutomationExecutionViewModelPaginatedList> localVarResponse = await ApiV1AutomationExecutionLogsViewGetAsyncWithHttpInfo(filter, orderby, top, skip);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a viewmodel list of all AutomationExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AutomationExecutionViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationExecutionViewModelPaginatedList>> ApiV1AutomationExecutionLogsViewGetAsyncWithHttpInfo(string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionViewModelPaginatedList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>AutomationExecutionViewModel</returns>
        public AutomationExecutionViewModel ApiV1AutomationExecutionLogsViewIdGet(string id)
        {
            ApiResponse<AutomationExecutionViewModel> localVarResponse = ApiV1AutomationExecutionLogsViewIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>ApiResponse of AutomationExecutionViewModel</returns>
        public ApiResponse<AutomationExecutionViewModel> ApiV1AutomationExecutionLogsViewIdGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsViewIdGet");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/View/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionViewModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionViewModel)));
        }

        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>Task of AutomationExecutionViewModel</returns>
        public async System.Threading.Tasks.Task<AutomationExecutionViewModel> ApiV1AutomationExecutionLogsViewIdGetAsync(string id)
        {
            ApiResponse<AutomationExecutionViewModel> localVarResponse = await ApiV1AutomationExecutionLogsViewIdGetAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a AutomationExecution&#x27;s details for a particular AutomationExecution id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecution id</param>
        /// <returns>Task of ApiResponse (AutomationExecutionViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationExecutionViewModel>> ApiV1AutomationExecutionLogsViewIdGetAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->ApiV1AutomationExecutionLogsViewIdGet");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/View/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1AutomationExecutionLogsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionViewModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionViewModel)));
        }

        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>AutomationExecutionLog</returns>
        public AutomationExecutionLog GetAutomationExecutionLog(string id)
        {
            ApiResponse<AutomationExecutionLog> localVarResponse = GetAutomationExecutionLogWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>ApiResponse of AutomationExecutionLog</returns>
        public ApiResponse<AutomationExecutionLog> GetAutomationExecutionLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->GetAutomationExecutionLog");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutomationExecutionLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLog)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLog)));
        }

        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>Task of AutomationExecutionLog</returns>
        public async System.Threading.Tasks.Task<AutomationExecutionLog> GetAutomationExecutionLogAsync(string id)
        {
            ApiResponse<AutomationExecutionLog> localVarResponse = await GetAutomationExecutionLogAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a AutomationExecutionLog&#x27;s details for a particular AutomationExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">AutomationExecutionLog id</param>
        /// <returns>Task of ApiResponse (AutomationExecutionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomationExecutionLog>> GetAutomationExecutionLogAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AutomationExecutionLogsApi->GetAutomationExecutionLog");
            
            var localVarPath = "/api/v1/AutomationExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutomationExecutionLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomationExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AutomationExecutionLog)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomationExecutionLog)));
        }

    }
}
