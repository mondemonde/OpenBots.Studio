/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICredentialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a Count of Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        int? ApiV1CredentialsCountGet (string filter = null);

        /// <summary>
        /// Provides a Count of Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> ApiV1CredentialsCountGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Provides a list of all Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>CredentialPaginatedList</returns>
        CredentialPaginatedList ApiV1CredentialsGet (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of CredentialPaginatedList</returns>
        ApiResponse<CredentialPaginatedList> ApiV1CredentialsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Lookup list of all Active Directory credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CredentialsLookup&gt;</returns>
        List<CredentialsLookup> ApiV1CredentialsGetLookupGet ();

        /// <summary>
        /// Lookup list of all Active Directory credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CredentialsLookup&gt;</returns>
        ApiResponse<List<CredentialsLookup>> ApiV1CredentialsGetLookupGetWithHttpInfo ();
        /// <summary>
        /// Deletes a Credential with a specified id from the Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1CredentialsIdDelete (string id);

        /// <summary>
        /// Deletes a Credential with a specified id from the Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1CredentialsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Updates partial details of Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1CredentialsIdPatch (string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1CredentialsIdPatchWithHttpInfo (string id, List<Operation> body = null);
        /// <summary>
        /// Updates an Credential
        /// </summary>
        /// <remarks>
        /// Provides an action to update a Credential, when id and the new details of Credential are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1CredentialsIdPut (string id, Credential body = null);

        /// <summary>
        /// Updates an Credential
        /// </summary>
        /// <remarks>
        /// Provides an action to update a Credential, when id and the new details of Credential are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1CredentialsIdPutWithHttpInfo (string id, Credential body = null);
        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>string</returns>
        string ApiV1CredentialsPasswordIdGet (string id);

        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1CredentialsPasswordIdGetWithHttpInfo (string id);
        /// <summary>
        /// Adds a new Credential to the existing Credentials
        /// </summary>
        /// <remarks>
        /// Adds the Credential with unique Id to the existing Credentials
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Credential</returns>
        Credential ApiV1CredentialsPost (Credential body = null);

        /// <summary>
        /// Adds a new Credential to the existing Credentials
        /// </summary>
        /// <remarks>
        /// Adds the Credential with unique Id to the existing Credentials
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Credential</returns>
        ApiResponse<Credential> ApiV1CredentialsPostWithHttpInfo (Credential body = null);
        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>CredentialViewModel</returns>
        CredentialViewModel ApiV1CredentialsViewIdGet (string id);

        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>ApiResponse of CredentialViewModel</returns>
        ApiResponse<CredentialViewModel> ApiV1CredentialsViewIdGetWithHttpInfo (string id);
        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Credential</returns>
        Credential GetCredential (string id);

        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>ApiResponse of Credential</returns>
        ApiResponse<Credential> GetCredentialWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a Count of Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> ApiV1CredentialsCountGetAsync (string filter = null);

        /// <summary>
        /// Provides a Count of Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1CredentialsCountGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Provides a list of all Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of CredentialPaginatedList</returns>
        System.Threading.Tasks.Task<CredentialPaginatedList> ApiV1CredentialsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (CredentialPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialPaginatedList>> ApiV1CredentialsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Lookup list of all Active Directory credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CredentialsLookup&gt;</returns>
        System.Threading.Tasks.Task<List<CredentialsLookup>> ApiV1CredentialsGetLookupGetAsync ();

        /// <summary>
        /// Lookup list of all Active Directory credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CredentialsLookup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CredentialsLookup>>> ApiV1CredentialsGetLookupGetAsyncWithHttpInfo ();
        /// <summary>
        /// Deletes a Credential with a specified id from the Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1CredentialsIdDeleteAsync (string id);

        /// <summary>
        /// Deletes a Credential with a specified id from the Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1CredentialsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates partial details of Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1CredentialsIdPatchAsync (string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of Credential.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1CredentialsIdPatchAsyncWithHttpInfo (string id, List<Operation> body = null);
        /// <summary>
        /// Updates an Credential
        /// </summary>
        /// <remarks>
        /// Provides an action to update a Credential, when id and the new details of Credential are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1CredentialsIdPutAsync (string id, Credential body = null);

        /// <summary>
        /// Updates an Credential
        /// </summary>
        /// <remarks>
        /// Provides an action to update a Credential, when id and the new details of Credential are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1CredentialsIdPutAsyncWithHttpInfo (string id, Credential body = null);
        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1CredentialsPasswordIdGetAsync (string id);

        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1CredentialsPasswordIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Adds a new Credential to the existing Credentials
        /// </summary>
        /// <remarks>
        /// Adds the Credential with unique Id to the existing Credentials
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Credential</returns>
        System.Threading.Tasks.Task<Credential> ApiV1CredentialsPostAsync (Credential body = null);

        /// <summary>
        /// Adds a new Credential to the existing Credentials
        /// </summary>
        /// <remarks>
        /// Adds the Credential with unique Id to the existing Credentials
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credential>> ApiV1CredentialsPostAsyncWithHttpInfo (Credential body = null);
        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of CredentialViewModel</returns>
        System.Threading.Tasks.Task<CredentialViewModel> ApiV1CredentialsViewIdGetAsync (string id);

        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of ApiResponse (CredentialViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialViewModel>> ApiV1CredentialsViewIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of Credential</returns>
        System.Threading.Tasks.Task<Credential> GetCredentialAsync (string id);

        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credential>> GetCredentialAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CredentialsApi : ICredentialsApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CredentialsApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CredentialsApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CredentialsApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a Count of Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        public int? ApiV1CredentialsCountGet (string filter = null)
        {
             ApiResponse<int?> localVarResponse = ApiV1CredentialsCountGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a Count of Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > ApiV1CredentialsCountGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/api/v1/Credentials/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a Count of Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> ApiV1CredentialsCountGetAsync (string filter = null)
        {
             ApiResponse<int?> localVarResponse = await ApiV1CredentialsCountGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a Count of Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1CredentialsCountGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/api/v1/Credentials/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a list of all Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>CredentialPaginatedList</returns>
        public CredentialPaginatedList ApiV1CredentialsGet (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<CredentialPaginatedList> localVarResponse = ApiV1CredentialsGetWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of CredentialPaginatedList</returns>
        public ApiResponse< CredentialPaginatedList > ApiV1CredentialsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CredentialPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of CredentialPaginatedList</returns>
        public async System.Threading.Tasks.Task<CredentialPaginatedList> ApiV1CredentialsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<CredentialPaginatedList> localVarResponse = await ApiV1CredentialsGetAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all Credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (CredentialPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CredentialPaginatedList>> ApiV1CredentialsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CredentialPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialPaginatedList)));
        }

        /// <summary>
        /// Lookup list of all Active Directory credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CredentialsLookup&gt;</returns>
        public List<CredentialsLookup> ApiV1CredentialsGetLookupGet ()
        {
             ApiResponse<List<CredentialsLookup>> localVarResponse = ApiV1CredentialsGetLookupGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup list of all Active Directory credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CredentialsLookup&gt;</returns>
        public ApiResponse< List<CredentialsLookup> > ApiV1CredentialsGetLookupGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/Credentials/GetLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsGetLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CredentialsLookup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CredentialsLookup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CredentialsLookup>)));
        }

        /// <summary>
        /// Lookup list of all Active Directory credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CredentialsLookup&gt;</returns>
        public async System.Threading.Tasks.Task<List<CredentialsLookup>> ApiV1CredentialsGetLookupGetAsync ()
        {
             ApiResponse<List<CredentialsLookup>> localVarResponse = await ApiV1CredentialsGetLookupGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lookup list of all Active Directory credentials 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CredentialsLookup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CredentialsLookup>>> ApiV1CredentialsGetLookupGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/Credentials/GetLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsGetLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CredentialsLookup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CredentialsLookup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CredentialsLookup>)));
        }

        /// <summary>
        /// Deletes a Credential with a specified id from the Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1CredentialsIdDelete (string id)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1CredentialsIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Credential with a specified id from the Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1CredentialsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsIdDelete");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes a Credential with a specified id from the Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1CredentialsIdDeleteAsync (string id)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1CredentialsIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a Credential with a specified id from the Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1CredentialsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsIdDelete");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1CredentialsIdPatch (string id, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1CredentialsIdPatchWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1CredentialsIdPatchWithHttpInfo (string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsIdPatch");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1CredentialsIdPatchAsync (string id, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1CredentialsIdPatchAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of Credential. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1CredentialsIdPatchAsyncWithHttpInfo (string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsIdPatch");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates an Credential Provides an action to update a Credential, when id and the new details of Credential are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1CredentialsIdPut (string id, Credential body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1CredentialsIdPutWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an Credential Provides an action to update a Credential, when id and the new details of Credential are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1CredentialsIdPutWithHttpInfo (string id, Credential body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsIdPut");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates an Credential Provides an action to update a Credential, when id and the new details of Credential are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1CredentialsIdPutAsync (string id, Credential body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1CredentialsIdPutAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an Credential Provides an action to update a Credential, when id and the new details of Credential are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1CredentialsIdPutAsyncWithHttpInfo (string id, Credential body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsIdPut");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>string</returns>
        public string ApiV1CredentialsPasswordIdGet (string id)
        {
             ApiResponse<string> localVarResponse = ApiV1CredentialsPasswordIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1CredentialsPasswordIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsPasswordIdGet");

            var localVarPath = "/api/v1/Credentials/password/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsPasswordIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1CredentialsPasswordIdGetAsync (string id)
        {
             ApiResponse<string> localVarResponse = await ApiV1CredentialsPasswordIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a Credential&#x27;s password string for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1CredentialsPasswordIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsPasswordIdGet");

            var localVarPath = "/api/v1/Credentials/password/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsPasswordIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Adds a new Credential to the existing Credentials Adds the Credential with unique Id to the existing Credentials
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Credential</returns>
        public Credential ApiV1CredentialsPost (Credential body = null)
        {
             ApiResponse<Credential> localVarResponse = ApiV1CredentialsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new Credential to the existing Credentials Adds the Credential with unique Id to the existing Credentials
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Credential</returns>
        public ApiResponse< Credential > ApiV1CredentialsPostWithHttpInfo (Credential body = null)
        {

            var localVarPath = "/api/v1/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Credential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        /// Adds a new Credential to the existing Credentials Adds the Credential with unique Id to the existing Credentials
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Credential</returns>
        public async System.Threading.Tasks.Task<Credential> ApiV1CredentialsPostAsync (Credential body = null)
        {
             ApiResponse<Credential> localVarResponse = await ApiV1CredentialsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new Credential to the existing Credentials Adds the Credential with unique Id to the existing Credentials
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credential>> ApiV1CredentialsPostAsyncWithHttpInfo (Credential body = null)
        {

            var localVarPath = "/api/v1/Credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Credential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>CredentialViewModel</returns>
        public CredentialViewModel ApiV1CredentialsViewIdGet (string id)
        {
             ApiResponse<CredentialViewModel> localVarResponse = ApiV1CredentialsViewIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>ApiResponse of CredentialViewModel</returns>
        public ApiResponse< CredentialViewModel > ApiV1CredentialsViewIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsViewIdGet");

            var localVarPath = "/api/v1/Credentials/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CredentialViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialViewModel)));
        }

        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of CredentialViewModel</returns>
        public async System.Threading.Tasks.Task<CredentialViewModel> ApiV1CredentialsViewIdGetAsync (string id)
        {
             ApiResponse<CredentialViewModel> localVarResponse = await ApiV1CredentialsViewIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a Credential&#x27;s View details  for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of ApiResponse (CredentialViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CredentialViewModel>> ApiV1CredentialsViewIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->ApiV1CredentialsViewIdGet");

            var localVarPath = "/api/v1/Credentials/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1CredentialsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CredentialViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialViewModel)));
        }

        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Credential</returns>
        public Credential GetCredential (string id)
        {
             ApiResponse<Credential> localVarResponse = GetCredentialWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>ApiResponse of Credential</returns>
        public ApiResponse< Credential > GetCredentialWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->GetCredential");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Credential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of Credential</returns>
        public async System.Threading.Tasks.Task<Credential> GetCredentialAsync (string id)
        {
             ApiResponse<Credential> localVarResponse = await GetCredentialAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a Credential&#x27;s details for a particular Credential Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Credential id</param>
        /// <returns>Task of ApiResponse (Credential)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credential>> GetCredentialAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CredentialsApi->GetCredential");

            var localVarPath = "/api/v1/Credentials/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credential>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Credential) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)));
        }

    }
}
