/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMembershipApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Cards for Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>OrganizationCardPaginatedList</returns>
        OrganizationCardPaginatedList ApiV1PeoplePersonIdOrganizationsGet (string personId);

        /// <summary>
        /// Get Cards for Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>ApiResponse of OrganizationCardPaginatedList</returns>
        ApiResponse<OrganizationCardPaginatedList> ApiV1PeoplePersonIdOrganizationsGetWithHttpInfo (string personId);
        /// <summary>
        /// Leave a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1PeoplePersonIdOrganizationsIdDelete (string personId, string id);

        /// <summary>
        /// Leave a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1PeoplePersonIdOrganizationsIdDeleteWithHttpInfo (string personId, string id);
        /// <summary>
        /// Grant admin permission to non-admin users of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns></returns>
        void ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut (string personId, string id);

        /// <summary>
        /// Grant admin permission to non-admin users of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutWithHttpInfo (string personId, string id);
        /// <summary>
        /// Request for Joining an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns></returns>
        void ApiV1PeoplePersonIdOrganizationsIdPost (string personId, string id);

        /// <summary>
        /// Request for Joining an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1PeoplePersonIdOrganizationsIdPostWithHttpInfo (string personId, string id);
        /// <summary>
        /// Revoke admin permission of an admin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns></returns>
        void ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut (string personId, string id);

        /// <summary>
        /// Revoke admin permission of an admin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutWithHttpInfo (string personId, string id);
        /// <summary>
        /// Get Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>OrganizationListingPaginatedList</returns>
        OrganizationListingPaginatedList ApiV1PeoplePersonIdOrganizationsSearchGet (string personId, string startsWith = null, int? skip = null, int? take = null);

        /// <summary>
        /// Get Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>ApiResponse of OrganizationListingPaginatedList</returns>
        ApiResponse<OrganizationListingPaginatedList> ApiV1PeoplePersonIdOrganizationsSearchGetWithHttpInfo (string personId, string startsWith = null, int? skip = null, int? take = null);
        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request.
        /// </summary>
        /// <remarks>
        /// This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>OrganizationListingPaginatedList</returns>
        OrganizationListingPaginatedList ApiV1PeoplePersonIdOrganizationsSuggestionsGet (string personId);

        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request.
        /// </summary>
        /// <remarks>
        /// This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>ApiResponse of OrganizationListingPaginatedList</returns>
        ApiResponse<OrganizationListingPaginatedList> ApiV1PeoplePersonIdOrganizationsSuggestionsGetWithHttpInfo (string personId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Cards for Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>Task of OrganizationCardPaginatedList</returns>
        System.Threading.Tasks.Task<OrganizationCardPaginatedList> ApiV1PeoplePersonIdOrganizationsGetAsync (string personId);

        /// <summary>
        /// Get Cards for Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>Task of ApiResponse (OrganizationCardPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationCardPaginatedList>> ApiV1PeoplePersonIdOrganizationsGetAsyncWithHttpInfo (string personId);
        /// <summary>
        /// Leave a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1PeoplePersonIdOrganizationsIdDeleteAsync (string personId, string id);

        /// <summary>
        /// Leave a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1PeoplePersonIdOrganizationsIdDeleteAsyncWithHttpInfo (string personId, string id);
        /// <summary>
        /// Grant admin permission to non-admin users of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutAsync (string personId, string id);

        /// <summary>
        /// Grant admin permission to non-admin users of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutAsyncWithHttpInfo (string personId, string id);
        /// <summary>
        /// Request for Joining an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1PeoplePersonIdOrganizationsIdPostAsync (string personId, string id);

        /// <summary>
        /// Request for Joining an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PeoplePersonIdOrganizationsIdPostAsyncWithHttpInfo (string personId, string id);
        /// <summary>
        /// Revoke admin permission of an admin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutAsync (string personId, string id);

        /// <summary>
        /// Revoke admin permission of an admin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutAsyncWithHttpInfo (string personId, string id);
        /// <summary>
        /// Get Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>Task of OrganizationListingPaginatedList</returns>
        System.Threading.Tasks.Task<OrganizationListingPaginatedList> ApiV1PeoplePersonIdOrganizationsSearchGetAsync (string personId, string startsWith = null, int? skip = null, int? take = null);

        /// <summary>
        /// Get Organizations I have access to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (OrganizationListingPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationListingPaginatedList>> ApiV1PeoplePersonIdOrganizationsSearchGetAsyncWithHttpInfo (string personId, string startsWith = null, int? skip = null, int? take = null);
        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request.
        /// </summary>
        /// <remarks>
        /// This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>Task of OrganizationListingPaginatedList</returns>
        System.Threading.Tasks.Task<OrganizationListingPaginatedList> ApiV1PeoplePersonIdOrganizationsSuggestionsGetAsync (string personId);

        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request.
        /// </summary>
        /// <remarks>
        /// This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>Task of ApiResponse (OrganizationListingPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationListingPaginatedList>> ApiV1PeoplePersonIdOrganizationsSuggestionsGetAsyncWithHttpInfo (string personId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MembershipApi : IMembershipApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembershipApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipApi"/> class
        /// </summary>
        /// <returns></returns>
        public MembershipApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MembershipApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Cards for Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>OrganizationCardPaginatedList</returns>
        public OrganizationCardPaginatedList ApiV1PeoplePersonIdOrganizationsGet (string personId)
        {
             ApiResponse<OrganizationCardPaginatedList> localVarResponse = ApiV1PeoplePersonIdOrganizationsGetWithHttpInfo(personId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cards for Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>ApiResponse of OrganizationCardPaginatedList</returns>
        public ApiResponse< OrganizationCardPaginatedList > ApiV1PeoplePersonIdOrganizationsGetWithHttpInfo (string personId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsGet");

            var localVarPath = "/api/v1/People/{personId}/Organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationCardPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationCardPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationCardPaginatedList)));
        }

        /// <summary>
        /// Get Cards for Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>Task of OrganizationCardPaginatedList</returns>
        public async System.Threading.Tasks.Task<OrganizationCardPaginatedList> ApiV1PeoplePersonIdOrganizationsGetAsync (string personId)
        {
             ApiResponse<OrganizationCardPaginatedList> localVarResponse = await ApiV1PeoplePersonIdOrganizationsGetAsyncWithHttpInfo(personId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Cards for Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">PErson Identifier</param>
        /// <returns>Task of ApiResponse (OrganizationCardPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationCardPaginatedList>> ApiV1PeoplePersonIdOrganizationsGetAsyncWithHttpInfo (string personId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsGet");

            var localVarPath = "/api/v1/People/{personId}/Organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationCardPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationCardPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationCardPaginatedList)));
        }

        /// <summary>
        /// Leave a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1PeoplePersonIdOrganizationsIdDelete (string personId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1PeoplePersonIdOrganizationsIdDeleteWithHttpInfo(personId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leave a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1PeoplePersonIdOrganizationsIdDeleteWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdDelete");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Leave a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1PeoplePersonIdOrganizationsIdDeleteAsync (string personId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1PeoplePersonIdOrganizationsIdDeleteAsyncWithHttpInfo(personId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leave a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <param name="id">ID of the organization that the user wants to delete the membership from</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1PeoplePersonIdOrganizationsIdDeleteAsyncWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdDelete");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Grant admin permission to non-admin users of the organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns></returns>
        public void ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut (string personId, string id)
        {
             ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutWithHttpInfo(personId, id);
        }

        /// <summary>
        /// Grant admin permission to non-admin users of the organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}/GrantAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Grant admin permission to non-admin users of the organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutAsync (string personId, string id)
        {
             await ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutAsyncWithHttpInfo(personId, id);

        }

        /// <summary>
        /// Grant admin permission to non-admin users of the organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be grant</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PeoplePersonIdOrganizationsIdGrantAdminPutAsyncWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}/GrantAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdGrantAdminPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Request for Joining an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns></returns>
        public void ApiV1PeoplePersonIdOrganizationsIdPost (string personId, string id)
        {
             ApiV1PeoplePersonIdOrganizationsIdPostWithHttpInfo(personId, id);
        }

        /// <summary>
        /// Request for Joining an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1PeoplePersonIdOrganizationsIdPostWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdPost");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Request for Joining an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1PeoplePersonIdOrganizationsIdPostAsync (string personId, string id)
        {
             await ApiV1PeoplePersonIdOrganizationsIdPostAsyncWithHttpInfo(personId, id);

        }

        /// <summary>
        /// Request for Joining an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">UserID of the person logged in.</param>
        /// <param name="id">Organization ID that the user wants to be a member of</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PeoplePersonIdOrganizationsIdPostAsyncWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdPost");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Revoke admin permission of an admin 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns></returns>
        public void ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut (string personId, string id)
        {
             ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutWithHttpInfo(personId, id);
        }

        /// <summary>
        /// Revoke admin permission of an admin 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}/RevokeAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Revoke admin permission of an admin 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutAsync (string personId, string id)
        {
             await ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutAsyncWithHttpInfo(personId, id);

        }

        /// <summary>
        /// Revoke admin permission of an admin 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">user who&#x27;s admin permission needs to be revoked</param>
        /// <param name="id">Organization Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPutAsyncWithHttpInfo (string personId, string id)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut");

            var localVarPath = "/api/v1/People/{personId}/Organizations/{id}/RevokeAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsIdRevokeAdminPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>OrganizationListingPaginatedList</returns>
        public OrganizationListingPaginatedList ApiV1PeoplePersonIdOrganizationsSearchGet (string personId, string startsWith = null, int? skip = null, int? take = null)
        {
             ApiResponse<OrganizationListingPaginatedList> localVarResponse = ApiV1PeoplePersonIdOrganizationsSearchGetWithHttpInfo(personId, startsWith, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>ApiResponse of OrganizationListingPaginatedList</returns>
        public ApiResponse< OrganizationListingPaginatedList > ApiV1PeoplePersonIdOrganizationsSearchGetWithHttpInfo (string personId, string startsWith = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsSearchGet");

            var localVarPath = "/api/v1/People/{personId}/Organizations/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$take", take)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationListingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationListingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationListingPaginatedList)));
        }

        /// <summary>
        /// Get Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>Task of OrganizationListingPaginatedList</returns>
        public async System.Threading.Tasks.Task<OrganizationListingPaginatedList> ApiV1PeoplePersonIdOrganizationsSearchGetAsync (string personId, string startsWith = null, int? skip = null, int? take = null)
        {
             ApiResponse<OrganizationListingPaginatedList> localVarResponse = await ApiV1PeoplePersonIdOrganizationsSearchGetAsyncWithHttpInfo(personId, startsWith, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Organizations I have access to. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="startsWith">Search criteria (optional)</param>
        /// <param name="skip">no of records to be skipped (optional, default to 0)</param>
        /// <param name="take"> (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (OrganizationListingPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationListingPaginatedList>> ApiV1PeoplePersonIdOrganizationsSearchGetAsyncWithHttpInfo (string personId, string startsWith = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsSearchGet");

            var localVarPath = "/api/v1/People/{personId}/Organizations/Search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (startsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsWith", startsWith)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$take", take)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationListingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationListingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationListingPaginatedList)));
        }

        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request. This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>OrganizationListingPaginatedList</returns>
        public OrganizationListingPaginatedList ApiV1PeoplePersonIdOrganizationsSuggestionsGet (string personId)
        {
             ApiResponse<OrganizationListingPaginatedList> localVarResponse = ApiV1PeoplePersonIdOrganizationsSuggestionsGetWithHttpInfo(personId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request. This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>ApiResponse of OrganizationListingPaginatedList</returns>
        public ApiResponse< OrganizationListingPaginatedList > ApiV1PeoplePersonIdOrganizationsSuggestionsGetWithHttpInfo (string personId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsSuggestionsGet");

            var localVarPath = "/api/v1/People/{personId}/Organizations/Suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsSuggestionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationListingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationListingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationListingPaginatedList)));
        }

        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request. This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>Task of OrganizationListingPaginatedList</returns>
        public async System.Threading.Tasks.Task<OrganizationListingPaginatedList> ApiV1PeoplePersonIdOrganizationsSuggestionsGetAsync (string personId)
        {
             ApiResponse<OrganizationListingPaginatedList> localVarResponse = await ApiV1PeoplePersonIdOrganizationsSuggestionsGetAsyncWithHttpInfo(personId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of Organizations that can be presented to the user as Suggestions to apply for access request. This method will return all Organizations that are visible to users with a certain email domain.  All the Emails of the user are matched to the Allowed Domains of Organiation.
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">ID of the currently logged in user. If the userID is not the same, then the request will be rejected</param>
        /// <returns>Task of ApiResponse (OrganizationListingPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationListingPaginatedList>> ApiV1PeoplePersonIdOrganizationsSuggestionsGetAsyncWithHttpInfo (string personId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling MembershipApi->ApiV1PeoplePersonIdOrganizationsSuggestionsGet");

            var localVarPath = "/api/v1/People/{personId}/Organizations/Suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1PeoplePersonIdOrganizationsSuggestionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationListingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationListingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationListingPaginatedList)));
        }

    }
}
