/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOrganizationMembersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all the members of the given Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>OrganizationMember</returns>
        OrganizationMember ApiV1OrganizationsOrganizationIdOrganizationMembersGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the members of the given Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        ApiResponse<OrganizationMember> ApiV1OrganizationsOrganizationIdOrganizationMembersGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes Organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete (string organizationId, string id);

        /// <summary>
        /// Deletes Organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteWithHttpInfo (string organizationId, string id);
        /// <summary>
        /// Updates the partial details of Organization members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch (string id, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Updates the partial details of Organization members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchWithHttpInfo (string id, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Update the Organization member details
        /// </summary>
        /// <remarks>
        /// Updates the Organization member details with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut (string organizationId, string id, OrganizationMember body = null);

        /// <summary>
        /// Update the Organization member details
        /// </summary>
        /// <remarks>
        /// Updates the Organization member details with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutWithHttpInfo (string organizationId, string id, OrganizationMember body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPost (string organizationId, InviteUserViewModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostWithHttpInfo (string organizationId, InviteUserViewModel body = null);
        /// <summary>
        /// Gets the People in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>TeamMemberPaginatedList</returns>
        TeamMemberPaginatedList ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets the People in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>ApiResponse of TeamMemberPaginatedList</returns>
        ApiResponse<TeamMemberPaginatedList> ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Adds a new access member to the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>OrganizationMember</returns>
        OrganizationMember ApiV1OrganizationsOrganizationIdOrganizationMembersPost (string organizationId, OrganizationMember body = null);

        /// <summary>
        /// Adds a new access member to the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        ApiResponse<OrganizationMember> ApiV1OrganizationsOrganizationIdOrganizationMembersPostWithHttpInfo (string organizationId, OrganizationMember body = null);
        /// <summary>
        /// Get all the members for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>OrganizationMember</returns>
        OrganizationMember GetOrganizationMember (string organizationId, string id);

        /// <summary>
        /// Get all the members for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        ApiResponse<OrganizationMember> GetOrganizationMemberWithHttpInfo (string organizationId, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all the members of the given Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of OrganizationMember</returns>
        System.Threading.Tasks.Task<OrganizationMember> ApiV1OrganizationsOrganizationIdOrganizationMembersGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the members of the given Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiV1OrganizationsOrganizationIdOrganizationMembersGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes Organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteAsync (string organizationId, string id);

        /// <summary>
        /// Deletes Organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteAsyncWithHttpInfo (string organizationId, string id);
        /// <summary>
        /// Updates the partial details of Organization members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchAsync (string id, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Updates the partial details of Organization members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchAsyncWithHttpInfo (string id, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Update the Organization member details
        /// </summary>
        /// <remarks>
        /// Updates the Organization member details with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutAsync (string organizationId, string id, OrganizationMember body = null);

        /// <summary>
        /// Update the Organization member details
        /// </summary>
        /// <remarks>
        /// Updates the Organization member details with the particular id ,for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutAsyncWithHttpInfo (string organizationId, string id, OrganizationMember body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostAsync (string organizationId, InviteUserViewModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostAsyncWithHttpInfo (string organizationId, InviteUserViewModel body = null);
        /// <summary>
        /// Gets the People in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>Task of TeamMemberPaginatedList</returns>
        System.Threading.Tasks.Task<TeamMemberPaginatedList> ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets the People in the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (TeamMemberPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberPaginatedList>> ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Adds a new access member to the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>Task of OrganizationMember</returns>
        System.Threading.Tasks.Task<OrganizationMember> ApiV1OrganizationsOrganizationIdOrganizationMembersPostAsync (string organizationId, OrganizationMember body = null);

        /// <summary>
        /// Adds a new access member to the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiV1OrganizationsOrganizationIdOrganizationMembersPostAsyncWithHttpInfo (string organizationId, OrganizationMember body = null);
        /// <summary>
        /// Get all the members for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>Task of OrganizationMember</returns>
        System.Threading.Tasks.Task<OrganizationMember> GetOrganizationMemberAsync (string organizationId, string id);

        /// <summary>
        /// Get all the members for a particular organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> GetOrganizationMemberAsyncWithHttpInfo (string organizationId, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OrganizationMembersApi : IOrganizationMembersApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMembersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationMembersApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMembersApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrganizationMembersApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMembersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationMembersApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all the members of the given Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>OrganizationMember</returns>
        public OrganizationMember ApiV1OrganizationsOrganizationIdOrganizationMembersGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationMembersGetWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the members of the given Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        public ApiResponse< OrganizationMember > ApiV1OrganizationsOrganizationIdOrganizationMembersGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Gets all the members of the given Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of OrganizationMember</returns>
        public async System.Threading.Tasks.Task<OrganizationMember> ApiV1OrganizationsOrganizationIdOrganizationMembersGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationMembersGetAsyncWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the members of the given Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter">search using a field (optional)</param>
        /// <param name="orderby">sort ascending or  descending (optional)</param>
        /// <param name="top">fetches the first 100 rows (optional, default to 100)</param>
        /// <param name="skip">skips the &#x27;n&#x27; number of rows (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiV1OrganizationsOrganizationIdOrganizationMembersGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Deletes Organization member 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete (string organizationId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteWithHttpInfo(organizationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes Organization member 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes Organization member 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteAsync (string organizationId, string id)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteAsyncWithHttpInfo(organizationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes Organization member 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">Organization member identifier.</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersIdDeleteAsyncWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the partial details of Organization members. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch (string id, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchWithHttpInfo(id, organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the partial details of Organization members. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchWithHttpInfo (string id, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the partial details of Organization members. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchAsync (string id, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchAsyncWithHttpInfo(id, organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the partial details of Organization members. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization member identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">values to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatchAsyncWithHttpInfo (string id, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the Organization member details Updates the Organization member details with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut (string organizationId, string id, OrganizationMember body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutWithHttpInfo(organizationId, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Organization member details Updates the Organization member details with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutWithHttpInfo (string organizationId, string id, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the Organization member details Updates the Organization member details with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutAsync (string organizationId, string id, OrganizationMember body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutAsyncWithHttpInfo(organizationId, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the Organization member details Updates the Organization member details with the particular id ,for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Org member  Id</param>
        /// <param name="body">new value of the Organization member  to be updated . (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersIdPutAsyncWithHttpInfo (string organizationId, string id, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPost (string organizationId, InviteUserViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostWithHttpInfo(organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostWithHttpInfo (string organizationId, InviteUserViewModel body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/InviteUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostAsync (string organizationId, InviteUserViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostAsyncWithHttpInfo(organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPostAsyncWithHttpInfo (string organizationId, InviteUserViewModel body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/InviteUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersInviteUserPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Gets the People in the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>TeamMemberPaginatedList</returns>
        public TeamMemberPaginatedList ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<TeamMemberPaginatedList> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the People in the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>ApiResponse of TeamMemberPaginatedList</returns>
        public ApiResponse< TeamMemberPaginatedList > ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/People";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMemberPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberPaginatedList)));
        }

        /// <summary>
        /// Gets the People in the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>Task of TeamMemberPaginatedList</returns>
        public async System.Threading.Tasks.Task<TeamMemberPaginatedList> ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<TeamMemberPaginatedList> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetAsyncWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the People in the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization identifier.</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">The top. (optional, default to 100)</param>
        /// <param name="skip">The skip. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (TeamMemberPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberPaginatedList>> ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/People";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersPeopleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMemberPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberPaginatedList)));
        }

        /// <summary>
        /// Adds a new access member to the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>OrganizationMember</returns>
        public OrganizationMember ApiV1OrganizationsOrganizationIdOrganizationMembersPost (string organizationId, OrganizationMember body = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationMembersPostWithHttpInfo(organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new access member to the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        public ApiResponse< OrganizationMember > ApiV1OrganizationsOrganizationIdOrganizationMembersPostWithHttpInfo (string organizationId, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Adds a new access member to the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>Task of OrganizationMember</returns>
        public async System.Threading.Tasks.Task<OrganizationMember> ApiV1OrganizationsOrganizationIdOrganizationMembersPostAsync (string organizationId, OrganizationMember body = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationMembersPostAsyncWithHttpInfo(organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new access member to the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">Org member details (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiV1OrganizationsOrganizationIdOrganizationMembersPostAsyncWithHttpInfo (string organizationId, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiV1OrganizationsOrganizationIdOrganizationMembersPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Get all the members for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>OrganizationMember</returns>
        public OrganizationMember GetOrganizationMember (string organizationId, string id)
        {
             ApiResponse<OrganizationMember> localVarResponse = GetOrganizationMemberWithHttpInfo(organizationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the members for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        public ApiResponse< OrganizationMember > GetOrganizationMemberWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->GetOrganizationMember");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->GetOrganizationMember");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Get all the members for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>Task of OrganizationMember</returns>
        public async System.Threading.Tasks.Task<OrganizationMember> GetOrganizationMemberAsync (string organizationId, string id)
        {
             ApiResponse<OrganizationMember> localVarResponse = await GetOrganizationMemberAsyncWithHttpInfo(organizationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the members for a particular organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Id</param>
        /// <param name="id">Organization member Identifier.</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> GetOrganizationMemberAsyncWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->GetOrganizationMember");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationMembersApi->GetOrganizationMember");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationMembers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

    }
}
