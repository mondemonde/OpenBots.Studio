/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOrganizationSettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>OrganizationSetting</returns>
        OrganizationSetting ApiV1OrganizationsOrganizationIdOrganizationSettingsGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of OrganizationSetting</returns>
        ApiResponse<OrganizationSetting> ApiV1OrganizationsOrganizationIdOrganizationSettingsGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes setting with the specific id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete (string id, string organizationId);

        /// <summary>
        /// Deletes setting with the specific id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteWithHttpInfo (string id, string organizationId);
        /// <summary>
        /// Partial Updates the Organization settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch (string id, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Partial Updates the Organization settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchWithHttpInfo (string id, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Updates the process for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut (string organizationId, string id, OrganizationSetting body = null);

        /// <summary>
        /// Updates the process for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutWithHttpInfo (string organizationId, string id, OrganizationSetting body = null);
        /// <summary>
        /// Adds a Business process for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>OrganizationSetting</returns>
        OrganizationSetting ApiV1OrganizationsOrganizationIdOrganizationSettingsPost (string organizationId, OrganizationSetting body = null);

        /// <summary>
        /// Adds a Business process for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>ApiResponse of OrganizationSetting</returns>
        ApiResponse<OrganizationSetting> ApiV1OrganizationsOrganizationIdOrganizationSettingsPostWithHttpInfo (string organizationId, OrganizationSetting body = null);
        /// <summary>
        /// Gets a particular Business process for an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>OrganizationSetting</returns>
        OrganizationSetting GetOrganizationSetting (string organizationId, string id);

        /// <summary>
        /// Gets a particular Business process for an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>ApiResponse of OrganizationSetting</returns>
        ApiResponse<OrganizationSetting> GetOrganizationSettingWithHttpInfo (string organizationId, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of OrganizationSetting</returns>
        System.Threading.Tasks.Task<OrganizationSetting> ApiV1OrganizationsOrganizationIdOrganizationSettingsGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (OrganizationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationSetting>> ApiV1OrganizationsOrganizationIdOrganizationSettingsGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes setting with the specific id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteAsync (string id, string organizationId);

        /// <summary>
        /// Deletes setting with the specific id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteAsyncWithHttpInfo (string id, string organizationId);
        /// <summary>
        /// Partial Updates the Organization settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchAsync (string id, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Partial Updates the Organization settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchAsyncWithHttpInfo (string id, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Updates the process for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutAsync (string organizationId, string id, OrganizationSetting body = null);

        /// <summary>
        /// Updates the process for an Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutAsyncWithHttpInfo (string organizationId, string id, OrganizationSetting body = null);
        /// <summary>
        /// Adds a Business process for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>Task of OrganizationSetting</returns>
        System.Threading.Tasks.Task<OrganizationSetting> ApiV1OrganizationsOrganizationIdOrganizationSettingsPostAsync (string organizationId, OrganizationSetting body = null);

        /// <summary>
        /// Adds a Business process for the Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationSetting>> ApiV1OrganizationsOrganizationIdOrganizationSettingsPostAsyncWithHttpInfo (string organizationId, OrganizationSetting body = null);
        /// <summary>
        /// Gets a particular Business process for an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>Task of OrganizationSetting</returns>
        System.Threading.Tasks.Task<OrganizationSetting> GetOrganizationSettingAsync (string organizationId, string id);

        /// <summary>
        /// Gets a particular Business process for an organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>Task of ApiResponse (OrganizationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationSetting>> GetOrganizationSettingAsyncWithHttpInfo (string organizationId, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OrganizationSettingsApi : IOrganizationSettingsApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationSettingsApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSettingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrganizationSettingsApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationSettingsApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>OrganizationSetting</returns>
        public OrganizationSetting ApiV1OrganizationsOrganizationIdOrganizationSettingsGet (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<OrganizationSetting> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationSettingsGetWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of OrganizationSetting</returns>
        public ApiResponse< OrganizationSetting > ApiV1OrganizationsOrganizationIdOrganizationSettingsGetWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationSetting)));
        }

        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of OrganizationSetting</returns>
        public async System.Threading.Tasks.Task<OrganizationSetting> ApiV1OrganizationsOrganizationIdOrganizationSettingsGetAsync (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<OrganizationSetting> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationSettingsGetAsyncWithHttpInfo(organizationId, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the Business process and their priorities and status for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (OrganizationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationSetting>> ApiV1OrganizationsOrganizationIdOrganizationSettingsGetAsyncWithHttpInfo (string organizationId, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsGet");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationSetting)));
        }

        /// <summary>
        /// Deletes setting with the specific id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete (string id, string organizationId)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteWithHttpInfo(id, organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes setting with the specific id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteWithHttpInfo (string id, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes setting with the specific id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteAsync (string id, string organizationId)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteAsyncWithHttpInfo(id, organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes setting with the specific id 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier</param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDeleteAsyncWithHttpInfo (string id, string organizationId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Partial Updates the Organization settings 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch (string id, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchWithHttpInfo(id, organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partial Updates the Organization settings 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchWithHttpInfo (string id, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Partial Updates the Organization settings 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchAsync (string id, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchAsyncWithHttpInfo(id, organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partial Updates the Organization settings 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Organization setting identifier.</param>
        /// <param name="organizationId"></param>
        /// <param name="body">Values to be updated , Org ID/Business process key prefix/BP prioritiescsv/BP status CSV (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatchAsyncWithHttpInfo (string id, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the process for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut (string organizationId, string id, OrganizationSetting body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutWithHttpInfo(organizationId, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the process for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutWithHttpInfo (string organizationId, string id, OrganizationSetting body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the process for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutAsync (string organizationId, string id, OrganizationSetting body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutAsyncWithHttpInfo(organizationId, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the process for an Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization IDentifier</param>
        /// <param name="id">Organization Setting Identifier</param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPutAsyncWithHttpInfo (string organizationId, string id, OrganizationSetting body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds a Business process for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>OrganizationSetting</returns>
        public OrganizationSetting ApiV1OrganizationsOrganizationIdOrganizationSettingsPost (string organizationId, OrganizationSetting body = null)
        {
             ApiResponse<OrganizationSetting> localVarResponse = ApiV1OrganizationsOrganizationIdOrganizationSettingsPostWithHttpInfo(organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a Business process for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>ApiResponse of OrganizationSetting</returns>
        public ApiResponse< OrganizationSetting > ApiV1OrganizationsOrganizationIdOrganizationSettingsPostWithHttpInfo (string organizationId, OrganizationSetting body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationSetting)));
        }

        /// <summary>
        /// Adds a Business process for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>Task of OrganizationSetting</returns>
        public async System.Threading.Tasks.Task<OrganizationSetting> ApiV1OrganizationsOrganizationIdOrganizationSettingsPostAsync (string organizationId, OrganizationSetting body = null)
        {
             ApiResponse<OrganizationSetting> localVarResponse = await ApiV1OrganizationsOrganizationIdOrganizationSettingsPostAsyncWithHttpInfo(organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a Business process for the Organization 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization Identifier</param>
        /// <param name="body">details of the Business process, Status and priority (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationSetting>> ApiV1OrganizationsOrganizationIdOrganizationSettingsPostAsyncWithHttpInfo (string organizationId, OrganizationSetting body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->ApiV1OrganizationsOrganizationIdOrganizationSettingsPost");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1OrganizationsOrganizationIdOrganizationSettingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationSetting)));
        }

        /// <summary>
        /// Gets a particular Business process for an organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>OrganizationSetting</returns>
        public OrganizationSetting GetOrganizationSetting (string organizationId, string id)
        {
             ApiResponse<OrganizationSetting> localVarResponse = GetOrganizationSettingWithHttpInfo(organizationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a particular Business process for an organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>ApiResponse of OrganizationSetting</returns>
        public ApiResponse< OrganizationSetting > GetOrganizationSettingWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->GetOrganizationSetting");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->GetOrganizationSetting");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationSetting)));
        }

        /// <summary>
        /// Gets a particular Business process for an organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>Task of OrganizationSetting</returns>
        public async System.Threading.Tasks.Task<OrganizationSetting> GetOrganizationSettingAsync (string organizationId, string id)
        {
             ApiResponse<OrganizationSetting> localVarResponse = await GetOrganizationSettingAsyncWithHttpInfo(organizationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a particular Business process for an organization. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">Organization Setting identifier</param>
        /// <returns>Task of ApiResponse (OrganizationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationSetting>> GetOrganizationSettingAsyncWithHttpInfo (string organizationId, string id)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationSettingsApi->GetOrganizationSetting");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganizationSettingsApi->GetOrganizationSetting");

            var localVarPath = "/api/v1/Organizations/{organizationId}/OrganizationSettings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationSetting)));
        }

    }
}
