/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProcessExecutionLogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a Count of ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        int? ApiV1ProcessExecutionLogsCountGet (string filter = null);

        /// <summary>
        /// Provides a Count of ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> ApiV1ProcessExecutionLogsCountGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Provides a list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ProcessExecutionLogPaginatedList</returns>
        ProcessExecutionLogPaginatedList ApiV1ProcessExecutionLogsGet (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of ProcessExecutionLogPaginatedList</returns>
        ApiResponse<ProcessExecutionLogPaginatedList> ApiV1ProcessExecutionLogsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1ProcessExecutionLogsIdDelete (string id);

        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1ProcessExecutionLogsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1ProcessExecutionLogsIdEndProcessPut (string id, ProcessExecutionLog body = null);

        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1ProcessExecutionLogsIdEndProcessPutWithHttpInfo (string id, ProcessExecutionLog body = null);
        /// <summary>
        /// Updates partial details of ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1ProcessExecutionLogsIdPatch (string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1ProcessExecutionLogsIdPatchWithHttpInfo (string id, List<Operation> body = null);
        /// <summary>
        /// Updates a ProcessExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiV1ProcessExecutionLogsIdPut (string id, ProcessExecutionLog body = null);

        /// <summary>
        /// Updates a ProcessExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiV1ProcessExecutionLogsIdPutWithHttpInfo (string id, ProcessExecutionLog body = null);
        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessExecutionLog</returns>
        ProcessExecutionLog ApiV1ProcessExecutionLogsPost (ProcessExecutionLog body = null);

        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessExecutionLog</returns>
        ApiResponse<ProcessExecutionLog> ApiV1ProcessExecutionLogsPostWithHttpInfo (ProcessExecutionLog body = null);
        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessExecutionLog</returns>
        ProcessExecutionLog ApiV1ProcessExecutionLogsStartprocessPost (ProcessExecutionLog body = null);

        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessExecutionLog</returns>
        ApiResponse<ProcessExecutionLog> ApiV1ProcessExecutionLogsStartprocessPostWithHttpInfo (ProcessExecutionLog body = null);
        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ProcessExecutionViewModelPaginatedList</returns>
        ProcessExecutionViewModelPaginatedList ApiV1ProcessExecutionLogsViewGet (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of ProcessExecutionViewModelPaginatedList</returns>
        ApiResponse<ProcessExecutionViewModelPaginatedList> ApiV1ProcessExecutionLogsViewGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>ProcessExecutionViewModel</returns>
        ProcessExecutionViewModel ApiV1ProcessExecutionLogsViewIdGet (string id);

        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>ApiResponse of ProcessExecutionViewModel</returns>
        ApiResponse<ProcessExecutionViewModel> ApiV1ProcessExecutionLogsViewIdGetWithHttpInfo (string id);
        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>ProcessExecutionLog</returns>
        ProcessExecutionLog GetProcessExecutionLog (string id);

        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>ApiResponse of ProcessExecutionLog</returns>
        ApiResponse<ProcessExecutionLog> GetProcessExecutionLogWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a Count of ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> ApiV1ProcessExecutionLogsCountGetAsync (string filter = null);

        /// <summary>
        /// Provides a Count of ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1ProcessExecutionLogsCountGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Provides a list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ProcessExecutionLogPaginatedList</returns>
        System.Threading.Tasks.Task<ProcessExecutionLogPaginatedList> ApiV1ProcessExecutionLogsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLogPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLogPaginatedList>> ApiV1ProcessExecutionLogsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdDeleteAsync (string id);

        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdEndProcessPutAsync (string id, ProcessExecutionLog body = null);

        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdEndProcessPutAsyncWithHttpInfo (string id, ProcessExecutionLog body = null);
        /// <summary>
        /// Updates partial details of ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdPatchAsync (string id, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of ProcessExecutionLog.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdPatchAsyncWithHttpInfo (string id, List<Operation> body = null);
        /// <summary>
        /// Updates a ProcessExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdPutAsync (string id, ProcessExecutionLog body = null);

        /// <summary>
        /// Updates a ProcessExecutionLog
        /// </summary>
        /// <remarks>
        /// Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdPutAsyncWithHttpInfo (string id, ProcessExecutionLog body = null);
        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessExecutionLog</returns>
        System.Threading.Tasks.Task<ProcessExecutionLog> ApiV1ProcessExecutionLogsPostAsync (ProcessExecutionLog body = null);

        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLog>> ApiV1ProcessExecutionLogsPostAsyncWithHttpInfo (ProcessExecutionLog body = null);
        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessExecutionLog</returns>
        System.Threading.Tasks.Task<ProcessExecutionLog> ApiV1ProcessExecutionLogsStartprocessPostAsync (ProcessExecutionLog body = null);

        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLog>> ApiV1ProcessExecutionLogsStartprocessPostAsyncWithHttpInfo (ProcessExecutionLog body = null);
        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ProcessExecutionViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<ProcessExecutionViewModelPaginatedList> ApiV1ProcessExecutionLogsViewGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessExecutionViewModelPaginatedList>> ApiV1ProcessExecutionLogsViewGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>Task of ProcessExecutionViewModel</returns>
        System.Threading.Tasks.Task<ProcessExecutionViewModel> ApiV1ProcessExecutionLogsViewIdGetAsync (string id);

        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>Task of ApiResponse (ProcessExecutionViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessExecutionViewModel>> ApiV1ProcessExecutionLogsViewIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>Task of ProcessExecutionLog</returns>
        System.Threading.Tasks.Task<ProcessExecutionLog> GetProcessExecutionLogAsync (string id);

        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLog>> GetProcessExecutionLogAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProcessExecutionLogsApi : IProcessExecutionLogsApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessExecutionLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessExecutionLogsApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessExecutionLogsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessExecutionLogsApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessExecutionLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessExecutionLogsApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a Count of ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        public int? ApiV1ProcessExecutionLogsCountGet (string filter = null)
        {
             ApiResponse<int?> localVarResponse = ApiV1ProcessExecutionLogsCountGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a Count of ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > ApiV1ProcessExecutionLogsCountGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a Count of ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> ApiV1ProcessExecutionLogsCountGetAsync (string filter = null)
        {
             ApiResponse<int?> localVarResponse = await ApiV1ProcessExecutionLogsCountGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a Count of ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1ProcessExecutionLogsCountGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ProcessExecutionLogPaginatedList</returns>
        public ProcessExecutionLogPaginatedList ApiV1ProcessExecutionLogsGet (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<ProcessExecutionLogPaginatedList> localVarResponse = ApiV1ProcessExecutionLogsGetWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of ProcessExecutionLogPaginatedList</returns>
        public ApiResponse< ProcessExecutionLogPaginatedList > ApiV1ProcessExecutionLogsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLogPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ProcessExecutionLogPaginatedList</returns>
        public async System.Threading.Tasks.Task<ProcessExecutionLogPaginatedList> ApiV1ProcessExecutionLogsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<ProcessExecutionLogPaginatedList> localVarResponse = await ApiV1ProcessExecutionLogsGetAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLogPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLogPaginatedList>> ApiV1ProcessExecutionLogsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLogPaginatedList)));
        }

        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1ProcessExecutionLogsIdDelete (string id)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1ProcessExecutionLogsIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1ProcessExecutionLogsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdDelete");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdDeleteAsync (string id)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1ProcessExecutionLogsIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a ProcessExecutionLog with a specified id from the ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog ID to be deleted- throws BadRequest if null or empty Guid/</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdDelete");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1ProcessExecutionLogsIdEndProcessPut (string id, ProcessExecutionLog body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1ProcessExecutionLogsIdEndProcessPutWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1ProcessExecutionLogsIdEndProcessPutWithHttpInfo (string id, ProcessExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdEndProcessPut");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}/EndProcess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdEndProcessPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdEndProcessPutAsync (string id, ProcessExecutionLog body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1ProcessExecutionLogsIdEndProcessPutAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Agent is able to update a ProcessExecutionLog End status Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdEndProcessPutAsyncWithHttpInfo (string id, ProcessExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdEndProcessPut");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}/EndProcess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdEndProcessPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1ProcessExecutionLogsIdPatch (string id, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1ProcessExecutionLogsIdPatchWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1ProcessExecutionLogsIdPatchWithHttpInfo (string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdPatch");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdPatchAsync (string id, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1ProcessExecutionLogsIdPatchAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of ProcessExecutionLog. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog identifier</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdPatchAsyncWithHttpInfo (string id, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdPatch");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates a ProcessExecutionLog Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiV1ProcessExecutionLogsIdPut (string id, ProcessExecutionLog body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiV1ProcessExecutionLogsIdPutWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a ProcessExecutionLog Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiV1ProcessExecutionLogsIdPutWithHttpInfo (string id, ProcessExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdPut");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            String localVarHttpHeaderAuthorization = $"Bearer {this.Configuration.AccessToken}";
            if (localVarHttpHeaderAuthorization != null)
                localVarHeaderParams.Add("Authorization", localVarHttpHeaderAuthorization);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates a ProcessExecutionLog Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiV1ProcessExecutionLogsIdPutAsync (string id, ProcessExecutionLog body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiV1ProcessExecutionLogsIdPutAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a ProcessExecutionLog Provides an action to update a ProcessExecutionLog, when ProcessExecutionLog id and the new details of ProcessExecutionLog are given
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
        /// <param name="body">ProcessExecutionLog details to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1ProcessExecutionLogsIdPutAsyncWithHttpInfo (string id, ProcessExecutionLog body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsIdPut");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessExecutionLog</returns>
        public ProcessExecutionLog ApiV1ProcessExecutionLogsPost (ProcessExecutionLog body = null)
        {
             ApiResponse<ProcessExecutionLog> localVarResponse = ApiV1ProcessExecutionLogsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessExecutionLog</returns>
        public ApiResponse< ProcessExecutionLog > ApiV1ProcessExecutionLogsPostWithHttpInfo (ProcessExecutionLog body = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLog)));
        }

        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessExecutionLog</returns>
        public async System.Threading.Tasks.Task<ProcessExecutionLog> ApiV1ProcessExecutionLogsPostAsync (ProcessExecutionLog body = null)
        {
             ApiResponse<ProcessExecutionLog> localVarResponse = await ApiV1ProcessExecutionLogsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new ProcessExecutionLog to the existing ProcessExecutionLogs Adds the ProcessExecutionLog with unique ProcessExecutionLog Id to the existing ProcessExecutionLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLog>> ApiV1ProcessExecutionLogsPostAsyncWithHttpInfo (ProcessExecutionLog body = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLog)));
        }

        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessExecutionLog</returns>
        public ProcessExecutionLog ApiV1ProcessExecutionLogsStartprocessPost (ProcessExecutionLog body = null)
        {
             ApiResponse<ProcessExecutionLog> localVarResponse = ApiV1ProcessExecutionLogsStartprocessPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessExecutionLog</returns>
        public ApiResponse< ProcessExecutionLog > ApiV1ProcessExecutionLogsStartprocessPostWithHttpInfo (ProcessExecutionLog body = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs/startprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsStartprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLog)));
        }

        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessExecutionLog</returns>
        public async System.Threading.Tasks.Task<ProcessExecutionLog> ApiV1ProcessExecutionLogsStartprocessPostAsync (ProcessExecutionLog body = null)
        {
             ApiResponse<ProcessExecutionLog> localVarResponse = await ApiV1ProcessExecutionLogsStartprocessPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows Agent to add a new ProcessExecutionLog to the existing ProcessExecutionLogs Agent is able to Add the ProcessExecutionLog if the Agent is Connected
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLog>> ApiV1ProcessExecutionLogsStartprocessPostAsyncWithHttpInfo (ProcessExecutionLog body = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs/startprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsStartprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLog)));
        }

        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ProcessExecutionViewModelPaginatedList</returns>
        public ProcessExecutionViewModelPaginatedList ApiV1ProcessExecutionLogsViewGet (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<ProcessExecutionViewModelPaginatedList> localVarResponse = ApiV1ProcessExecutionLogsViewGetWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of ProcessExecutionViewModelPaginatedList</returns>
        public ApiResponse< ProcessExecutionViewModelPaginatedList > ApiV1ProcessExecutionLogsViewGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ProcessExecutionViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<ProcessExecutionViewModelPaginatedList> ApiV1ProcessExecutionLogsViewGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<ProcessExecutionViewModelPaginatedList> localVarResponse = await ApiV1ProcessExecutionLogsViewGetAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a viewmodel list of all ProcessExecutionLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ProcessExecutionViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessExecutionViewModelPaginatedList>> ApiV1ProcessExecutionLogsViewGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/ProcessExecutionLogs/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>ProcessExecutionViewModel</returns>
        public ProcessExecutionViewModel ApiV1ProcessExecutionLogsViewIdGet (string id)
        {
             ApiResponse<ProcessExecutionViewModel> localVarResponse = ApiV1ProcessExecutionLogsViewIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>ApiResponse of ProcessExecutionViewModel</returns>
        public ApiResponse< ProcessExecutionViewModel > ApiV1ProcessExecutionLogsViewIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsViewIdGet");

            var localVarPath = "/api/v1/ProcessExecutionLogs/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionViewModel)));
        }

        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>Task of ProcessExecutionViewModel</returns>
        public async System.Threading.Tasks.Task<ProcessExecutionViewModel> ApiV1ProcessExecutionLogsViewIdGetAsync (string id)
        {
             ApiResponse<ProcessExecutionViewModel> localVarResponse = await ApiV1ProcessExecutionLogsViewIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a processExecution&#x27;s details for a particular processExecution Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">processExecution id</param>
        /// <returns>Task of ApiResponse (ProcessExecutionViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessExecutionViewModel>> ApiV1ProcessExecutionLogsViewIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->ApiV1ProcessExecutionLogsViewIdGet");

            var localVarPath = "/api/v1/ProcessExecutionLogs/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessExecutionLogsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionViewModel)));
        }

        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>ProcessExecutionLog</returns>
        public ProcessExecutionLog GetProcessExecutionLog (string id)
        {
             ApiResponse<ProcessExecutionLog> localVarResponse = GetProcessExecutionLogWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>ApiResponse of ProcessExecutionLog</returns>
        public ApiResponse< ProcessExecutionLog > GetProcessExecutionLogWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->GetProcessExecutionLog");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessExecutionLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLog)));
        }

        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>Task of ProcessExecutionLog</returns>
        public async System.Threading.Tasks.Task<ProcessExecutionLog> GetProcessExecutionLogAsync (string id)
        {
             ApiResponse<ProcessExecutionLog> localVarResponse = await GetProcessExecutionLogAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a ProcessExecutionLog&#x27;s details for a particular ProcessExecutionLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessExecutionLog id</param>
        /// <returns>Task of ApiResponse (ProcessExecutionLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessExecutionLog>> GetProcessExecutionLogAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessExecutionLogsApi->GetProcessExecutionLog");

            var localVarPath = "/api/v1/ProcessExecutionLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessExecutionLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessExecutionLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessExecutionLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessExecutionLog)));
        }

    }
}
