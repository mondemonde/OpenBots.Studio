/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProcessLogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a Count of ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        int? ApiV1ProcessLogsCountGet (string filter = null);

        /// <summary>
        /// Provides a Count of ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> ApiV1ProcessLogsCountGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Exports process logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Object</returns>
        Object ApiV1ProcessLogsExportFiletypeGet (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Exports process logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiV1ProcessLogsExportFiletypeGetWithHttpInfo (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a list of all ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ProcessLogPaginatedList</returns>
        ProcessLogPaginatedList ApiV1ProcessLogsGet (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of ProcessLogPaginatedList</returns>
        ApiResponse<ProcessLogPaginatedList> ApiV1ProcessLogsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessLog</returns>
        ProcessLog ApiV1ProcessLogsPost (ProcessLog body = null);

        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessLog</returns>
        ApiResponse<ProcessLog> ApiV1ProcessLogsPostWithHttpInfo (ProcessLog body = null);
        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>ProcessLog</returns>
        ProcessLog GetProcessLog (string id);

        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>ApiResponse of ProcessLog</returns>
        ApiResponse<ProcessLog> GetProcessLogWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a Count of ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> ApiV1ProcessLogsCountGetAsync (string filter = null);

        /// <summary>
        /// Provides a Count of ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1ProcessLogsCountGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Exports process logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiV1ProcessLogsExportFiletypeGetAsync (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Exports process logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessLogsExportFiletypeGetAsyncWithHttpInfo (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a list of all ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ProcessLogPaginatedList</returns>
        System.Threading.Tasks.Task<ProcessLogPaginatedList> ApiV1ProcessLogsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all ProcessLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ProcessLogPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessLogPaginatedList>> ApiV1ProcessLogsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessLog</returns>
        System.Threading.Tasks.Task<ProcessLog> ApiV1ProcessLogsPostAsync (ProcessLog body = null);

        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs
        /// </summary>
        /// <remarks>
        /// Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessLog>> ApiV1ProcessLogsPostAsyncWithHttpInfo (ProcessLog body = null);
        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>Task of ProcessLog</returns>
        System.Threading.Tasks.Task<ProcessLog> GetProcessLogAsync (string id);

        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>Task of ApiResponse (ProcessLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessLog>> GetProcessLogAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProcessLogsApi : IProcessLogsApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessLogsApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessLogsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProcessLogsApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessLogsApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a Count of ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>int?</returns>
        public int? ApiV1ProcessLogsCountGet (string filter = null)
        {
             ApiResponse<int?> localVarResponse = ApiV1ProcessLogsCountGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a Count of ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > ApiV1ProcessLogsCountGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/api/v1/ProcessLogs/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Provides a Count of ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> ApiV1ProcessLogsCountGetAsync (string filter = null)
        {
             ApiResponse<int?> localVarResponse = await ApiV1ProcessLogsCountGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a Count of ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> ApiV1ProcessLogsCountGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/api/v1/ProcessLogs/Count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Exports process logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Object</returns>
        public Object ApiV1ProcessLogsExportFiletypeGet (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = ApiV1ProcessLogsExportFiletypeGetWithHttpInfo(fileType, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exports process logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ApiV1ProcessLogsExportFiletypeGetWithHttpInfo (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new ApiException(400, "Missing required parameter 'fileType' when calling ProcessLogsApi->ApiV1ProcessLogsExportFiletypeGet");

            var localVarPath = "/api/v1/ProcessLogs/export/{filetype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileType != null) localVarPathParams.Add("fileType", this.Configuration.ApiClient.ParameterToString(fileType)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsExportFiletypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Exports process logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiV1ProcessLogsExportFiletypeGetAsync (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<Object> localVarResponse = await ApiV1ProcessLogsExportFiletypeGetAsyncWithHttpInfo(fileType, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exports process logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded. Csv, Zip or Json</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ProcessLogsExportFiletypeGetAsyncWithHttpInfo (string fileType, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new ApiException(400, "Missing required parameter 'fileType' when calling ProcessLogsApi->ApiV1ProcessLogsExportFiletypeGet");

            var localVarPath = "/api/v1/ProcessLogs/export/{filetype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileType != null) localVarPathParams.Add("fileType", this.Configuration.ApiClient.ParameterToString(fileType)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsExportFiletypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Provides a list of all ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ProcessLogPaginatedList</returns>
        public ProcessLogPaginatedList ApiV1ProcessLogsGet (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<ProcessLogPaginatedList> localVarResponse = ApiV1ProcessLogsGetWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of ProcessLogPaginatedList</returns>
        public ApiResponse< ProcessLogPaginatedList > ApiV1ProcessLogsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/ProcessLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessLogPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ProcessLogPaginatedList</returns>
        public async System.Threading.Tasks.Task<ProcessLogPaginatedList> ApiV1ProcessLogsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<ProcessLogPaginatedList> localVarResponse = await ApiV1ProcessLogsGetAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all ProcessLogs 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ProcessLogPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessLogPaginatedList>> ApiV1ProcessLogsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/v1/ProcessLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessLogPaginatedList)));
        }

        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessLog</returns>
        public ProcessLog ApiV1ProcessLogsPost (ProcessLog body = null)
        {
             ApiResponse<ProcessLog> localVarResponse = ApiV1ProcessLogsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessLog</returns>
        public ApiResponse< ProcessLog > ApiV1ProcessLogsPostWithHttpInfo (ProcessLog body = null)
        {

            var localVarPath = "/api/v1/ProcessLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessLog)));
        }

        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessLog</returns>
        public async System.Threading.Tasks.Task<ProcessLog> ApiV1ProcessLogsPostAsync (ProcessLog body = null)
        {
             ApiResponse<ProcessLog> localVarResponse = await ApiV1ProcessLogsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new ProcessLog to the existing ProcessLogs Adds the ProcessLog with unique ProcessLog Id to the existing ProcessLogs
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessLog>> ApiV1ProcessLogsPostAsyncWithHttpInfo (ProcessLog body = null)
        {

            var localVarPath = "/api/v1/ProcessLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ProcessLogsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessLog)));
        }

        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>ProcessLog</returns>
        public ProcessLog GetProcessLog (string id)
        {
             ApiResponse<ProcessLog> localVarResponse = GetProcessLogWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>ApiResponse of ProcessLog</returns>
        public ApiResponse< ProcessLog > GetProcessLogWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessLogsApi->GetProcessLog");

            var localVarPath = "/api/v1/ProcessLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessLog)));
        }

        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>Task of ProcessLog</returns>
        public async System.Threading.Tasks.Task<ProcessLog> GetProcessLogAsync (string id)
        {
             ApiResponse<ProcessLog> localVarResponse = await GetProcessLogAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a ProcessLog&#x27;s details for a particular ProcessLog Id. 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ProcessLog id</param>
        /// <returns>Task of ApiResponse (ProcessLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessLog>> GetProcessLogAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessLogsApi->GetProcessLog");

            var localVarPath = "/api/v1/ProcessLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessLog)));
        }

    }
}
