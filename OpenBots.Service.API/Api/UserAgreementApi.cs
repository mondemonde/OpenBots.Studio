/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Service.API.Client;
using OpenBots.Service.API.Model;

namespace OpenBots.Service.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUserAgreementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get latest terms and conditions for user consent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserAgreement</returns>
        UserAgreement ApiV1UserAgreementGet ();

        /// <summary>
        /// Get latest terms and conditions for user consent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserAgreement</returns>
        ApiResponse<UserAgreement> ApiV1UserAgreementGetWithHttpInfo ();
        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAgreement</returns>
        UserAgreement ApiV1UserAgreementIdHasAcceptedAndNotExpiredGet (string id);

        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAgreement</returns>
        ApiResponse<UserAgreement> ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get latest terms and conditions for user consent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserAgreement</returns>
        System.Threading.Tasks.Task<UserAgreement> ApiV1UserAgreementGetAsync ();

        /// <summary>
        /// Get latest terms and conditions for user consent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAgreement>> ApiV1UserAgreementGetAsyncWithHttpInfo ();
        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAgreement</returns>
        System.Threading.Tasks.Task<UserAgreement> ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetAsync (string id);

        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAgreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAgreement>> ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UserAgreementApi : IUserAgreementApi
    {
        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserAgreementApi(String basePath)
        {
            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserAgreementApi()
        {
            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAgreementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserAgreementApi(OpenBots.Service.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get latest terms and conditions for user consent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserAgreement</returns>
        public UserAgreement ApiV1UserAgreementGet ()
        {
             ApiResponse<UserAgreement> localVarResponse = ApiV1UserAgreementGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get latest terms and conditions for user consent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserAgreement</returns>
        public ApiResponse< UserAgreement > ApiV1UserAgreementGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/UserAgreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserAgreementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreement)));
        }

        /// <summary>
        /// Get latest terms and conditions for user consent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserAgreement</returns>
        public async System.Threading.Tasks.Task<UserAgreement> ApiV1UserAgreementGetAsync ()
        {
             ApiResponse<UserAgreement> localVarResponse = await ApiV1UserAgreementGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get latest terms and conditions for user consent 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserAgreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAgreement>> ApiV1UserAgreementGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/UserAgreement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserAgreementGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreement)));
        }

        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserAgreement</returns>
        public UserAgreement ApiV1UserAgreementIdHasAcceptedAndNotExpiredGet (string id)
        {
             ApiResponse<UserAgreement> localVarResponse = ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserAgreement</returns>
        public ApiResponse< UserAgreement > ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserAgreementApi->ApiV1UserAgreementIdHasAcceptedAndNotExpiredGet");

            var localVarPath = "/api/v1/UserAgreement/{id}/HasAcceptedAndNotExpired";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserAgreementIdHasAcceptedAndNotExpiredGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreement)));
        }

        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserAgreement</returns>
        public async System.Threading.Tasks.Task<UserAgreement> ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetAsync (string id)
        {
             ApiResponse<UserAgreement> localVarResponse = await ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check that the UserConcent has been recorded for logged user on the latest user agreement and IsAccepted is True AND has not Expired.   If there is NO record of acceptance for the latest version of the Terms and Conditions, then response will be FALSE which will force to have user consent before proceeding 
        /// </summary>
        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserAgreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAgreement>> ApiV1UserAgreementIdHasAcceptedAndNotExpiredGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserAgreementApi->ApiV1UserAgreementIdHasAcceptedAndNotExpiredGet");

            var localVarPath = "/api/v1/UserAgreement/{id}/HasAcceptedAndNotExpired";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserAgreementIdHasAcceptedAndNotExpiredGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAgreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserAgreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAgreement)));
        }

    }
}
