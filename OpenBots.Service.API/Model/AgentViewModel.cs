/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// AgentViewModel
    /// </summary>
    [DataContract]
        public partial class AgentViewModel :  IEquatable<AgentViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AgentViewModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="userName">userName.</param>
        /// <param name="machineName">machineName (required).</param>
        /// <param name="macAddresses">macAddresses.</param>
        /// <param name="ipAddresses">ipAddresses.</param>
        /// <param name="isEnabled">isEnabled (required).</param>
        /// <param name="lastReportedOn">lastReportedOn.</param>
        /// <param name="lastReportedStatus">lastReportedStatus.</param>
        /// <param name="lastReportedWork">lastReportedWork.</param>
        /// <param name="lastReportedMessage">lastReportedMessage.</param>
        /// <param name="isHealthy">isHealthy.</param>
        /// <param name="isConnected">isConnected (required).</param>
        /// <param name="credentialId">credentialId.</param>
        /// <param name="credentialName">credentialName.</param>
        public AgentViewModel(Guid? id = default(Guid?), string name = default(string), string userName = default(string), string machineName = default(string), string macAddresses = default(string), string ipAddresses = default(string), bool? isEnabled = default(bool?), DateTime? lastReportedOn = default(DateTime?), string lastReportedStatus = default(string), string lastReportedWork = default(string), string lastReportedMessage = default(string), bool? isHealthy = default(bool?), bool? isConnected = default(bool?), Guid? credentialId = default(Guid?), string credentialName = default(string))
        {
            // to ensure "machineName" is required (not null)
            if (machineName == null)
            {
                throw new InvalidDataException("machineName is a required property for AgentViewModel and cannot be null");
            }
            else
            {
                this.MachineName = machineName;
            }
            // to ensure "isEnabled" is required (not null)
            if (isEnabled == null)
            {
                throw new InvalidDataException("isEnabled is a required property for AgentViewModel and cannot be null");
            }
            else
            {
                this.IsEnabled = isEnabled;
            }
            // to ensure "isConnected" is required (not null)
            if (isConnected == null)
            {
                throw new InvalidDataException("isConnected is a required property for AgentViewModel and cannot be null");
            }
            else
            {
                this.IsConnected = isConnected;
            }
            this.Id = id;
            this.Name = name;
            this.UserName = userName;
            this.MacAddresses = macAddresses;
            this.IpAddresses = ipAddresses;
            this.LastReportedOn = lastReportedOn;
            this.LastReportedStatus = lastReportedStatus;
            this.LastReportedWork = lastReportedWork;
            this.LastReportedMessage = lastReportedMessage;
            this.IsHealthy = isHealthy;
            this.CredentialId = credentialId;
            this.CredentialName = credentialName;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets MachineName
        /// </summary>
        [DataMember(Name="machineName", EmitDefaultValue=false)]
        public string MachineName { get; set; }

        /// <summary>
        /// Gets or Sets MacAddresses
        /// </summary>
        [DataMember(Name="macAddresses", EmitDefaultValue=false)]
        public string MacAddresses { get; set; }

        /// <summary>
        /// Gets or Sets IpAddresses
        /// </summary>
        [DataMember(Name="ipAddresses", EmitDefaultValue=false)]
        public string IpAddresses { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="isEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedOn
        /// </summary>
        [DataMember(Name="lastReportedOn", EmitDefaultValue=false)]
        public DateTime? LastReportedOn { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedStatus
        /// </summary>
        [DataMember(Name="lastReportedStatus", EmitDefaultValue=false)]
        public string LastReportedStatus { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedWork
        /// </summary>
        [DataMember(Name="lastReportedWork", EmitDefaultValue=false)]
        public string LastReportedWork { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedMessage
        /// </summary>
        [DataMember(Name="lastReportedMessage", EmitDefaultValue=false)]
        public string LastReportedMessage { get; set; }

        /// <summary>
        /// Gets or Sets IsHealthy
        /// </summary>
        [DataMember(Name="isHealthy", EmitDefaultValue=false)]
        public bool? IsHealthy { get; set; }

        /// <summary>
        /// Gets or Sets IsConnected
        /// </summary>
        [DataMember(Name="isConnected", EmitDefaultValue=false)]
        public bool? IsConnected { get; set; }

        /// <summary>
        /// Gets or Sets CredentialId
        /// </summary>
        [DataMember(Name="credentialId", EmitDefaultValue=false)]
        public Guid? CredentialId { get; set; }

        /// <summary>
        /// Gets or Sets CredentialName
        /// </summary>
        [DataMember(Name="credentialName", EmitDefaultValue=false)]
        public string CredentialName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgentViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  MachineName: ").Append(MachineName).Append("\n");
            sb.Append("  MacAddresses: ").Append(MacAddresses).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  LastReportedOn: ").Append(LastReportedOn).Append("\n");
            sb.Append("  LastReportedStatus: ").Append(LastReportedStatus).Append("\n");
            sb.Append("  LastReportedWork: ").Append(LastReportedWork).Append("\n");
            sb.Append("  LastReportedMessage: ").Append(LastReportedMessage).Append("\n");
            sb.Append("  IsHealthy: ").Append(IsHealthy).Append("\n");
            sb.Append("  IsConnected: ").Append(IsConnected).Append("\n");
            sb.Append("  CredentialId: ").Append(CredentialId).Append("\n");
            sb.Append("  CredentialName: ").Append(CredentialName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgentViewModel);
        }

        /// <summary>
        /// Returns true if AgentViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AgentViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgentViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.MachineName == input.MachineName ||
                    (this.MachineName != null &&
                    this.MachineName.Equals(input.MachineName))
                ) && 
                (
                    this.MacAddresses == input.MacAddresses ||
                    (this.MacAddresses != null &&
                    this.MacAddresses.Equals(input.MacAddresses))
                ) && 
                (
                    this.IpAddresses == input.IpAddresses ||
                    (this.IpAddresses != null &&
                    this.IpAddresses.Equals(input.IpAddresses))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.LastReportedOn == input.LastReportedOn ||
                    (this.LastReportedOn != null &&
                    this.LastReportedOn.Equals(input.LastReportedOn))
                ) && 
                (
                    this.LastReportedStatus == input.LastReportedStatus ||
                    (this.LastReportedStatus != null &&
                    this.LastReportedStatus.Equals(input.LastReportedStatus))
                ) && 
                (
                    this.LastReportedWork == input.LastReportedWork ||
                    (this.LastReportedWork != null &&
                    this.LastReportedWork.Equals(input.LastReportedWork))
                ) && 
                (
                    this.LastReportedMessage == input.LastReportedMessage ||
                    (this.LastReportedMessage != null &&
                    this.LastReportedMessage.Equals(input.LastReportedMessage))
                ) && 
                (
                    this.IsHealthy == input.IsHealthy ||
                    (this.IsHealthy != null &&
                    this.IsHealthy.Equals(input.IsHealthy))
                ) && 
                (
                    this.IsConnected == input.IsConnected ||
                    (this.IsConnected != null &&
                    this.IsConnected.Equals(input.IsConnected))
                ) && 
                (
                    this.CredentialId == input.CredentialId ||
                    (this.CredentialId != null &&
                    this.CredentialId.Equals(input.CredentialId))
                ) && 
                (
                    this.CredentialName == input.CredentialName ||
                    (this.CredentialName != null &&
                    this.CredentialName.Equals(input.CredentialName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.MachineName != null)
                    hashCode = hashCode * 59 + this.MachineName.GetHashCode();
                if (this.MacAddresses != null)
                    hashCode = hashCode * 59 + this.MacAddresses.GetHashCode();
                if (this.IpAddresses != null)
                    hashCode = hashCode * 59 + this.IpAddresses.GetHashCode();
                if (this.IsEnabled != null)
                    hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                if (this.LastReportedOn != null)
                    hashCode = hashCode * 59 + this.LastReportedOn.GetHashCode();
                if (this.LastReportedStatus != null)
                    hashCode = hashCode * 59 + this.LastReportedStatus.GetHashCode();
                if (this.LastReportedWork != null)
                    hashCode = hashCode * 59 + this.LastReportedWork.GetHashCode();
                if (this.LastReportedMessage != null)
                    hashCode = hashCode * 59 + this.LastReportedMessage.GetHashCode();
                if (this.IsHealthy != null)
                    hashCode = hashCode * 59 + this.IsHealthy.GetHashCode();
                if (this.IsConnected != null)
                    hashCode = hashCode * 59 + this.IsConnected.GetHashCode();
                if (this.CredentialId != null)
                    hashCode = hashCode * 59 + this.CredentialId.GetHashCode();
                if (this.CredentialName != null)
                    hashCode = hashCode * 59 + this.CredentialName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
