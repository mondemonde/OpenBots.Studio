/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// AutomationExecutionViewModel
    /// </summary>
    [DataContract]
        public partial class AutomationExecutionViewModel :  IEquatable<AutomationExecutionViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationExecutionViewModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="agentName">agentName.</param>
        /// <param name="automationName">automationName.</param>
        /// <param name="jobID">jobID.</param>
        /// <param name="automationID">automationID.</param>
        /// <param name="agentID">agentID.</param>
        /// <param name="startedOn">startedOn.</param>
        /// <param name="completedOn">completedOn.</param>
        /// <param name="trigger">trigger.</param>
        /// <param name="triggerDetails">triggerDetails.</param>
        /// <param name="status">status.</param>
        /// <param name="hasErrors">hasErrors.</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="errorDetails">errorDetails.</param>
        public AutomationExecutionViewModel(Guid? id = default(Guid?), string agentName = default(string), string automationName = default(string), Guid? jobID = default(Guid?), Guid? automationID = default(Guid?), Guid? agentID = default(Guid?), DateTime? startedOn = default(DateTime?), DateTime? completedOn = default(DateTime?), string trigger = default(string), string triggerDetails = default(string), string status = default(string), bool? hasErrors = default(bool?), string errorMessage = default(string), string errorDetails = default(string))
        {
            this.Id = id;
            this.AgentName = agentName;
            this.AutomationName = automationName;
            this.JobID = jobID;
            this.AutomationID = automationID;
            this.AgentID = agentID;
            this.StartedOn = startedOn;
            this.CompletedOn = completedOn;
            this.Trigger = trigger;
            this.TriggerDetails = triggerDetails;
            this.Status = status;
            this.HasErrors = hasErrors;
            this.ErrorMessage = errorMessage;
            this.ErrorDetails = errorDetails;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets AgentName
        /// </summary>
        [DataMember(Name="agentName", EmitDefaultValue=false)]
        public string AgentName { get; set; }

        /// <summary>
        /// Gets or Sets AutomationName
        /// </summary>
        [DataMember(Name="automationName", EmitDefaultValue=false)]
        public string AutomationName { get; set; }

        /// <summary>
        /// Gets or Sets JobID
        /// </summary>
        [DataMember(Name="jobID", EmitDefaultValue=false)]
        public Guid? JobID { get; set; }

        /// <summary>
        /// Gets or Sets AutomationID
        /// </summary>
        [DataMember(Name="automationID", EmitDefaultValue=false)]
        public Guid? AutomationID { get; set; }

        /// <summary>
        /// Gets or Sets AgentID
        /// </summary>
        [DataMember(Name="agentID", EmitDefaultValue=false)]
        public Guid? AgentID { get; set; }

        /// <summary>
        /// Gets or Sets StartedOn
        /// </summary>
        [DataMember(Name="startedOn", EmitDefaultValue=false)]
        public DateTime? StartedOn { get; set; }

        /// <summary>
        /// Gets or Sets CompletedOn
        /// </summary>
        [DataMember(Name="completedOn", EmitDefaultValue=false)]
        public DateTime? CompletedOn { get; set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public string Trigger { get; set; }

        /// <summary>
        /// Gets or Sets TriggerDetails
        /// </summary>
        [DataMember(Name="triggerDetails", EmitDefaultValue=false)]
        public string TriggerDetails { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets HasErrors
        /// </summary>
        [DataMember(Name="hasErrors", EmitDefaultValue=false)]
        public bool? HasErrors { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutomationExecutionViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AgentName: ").Append(AgentName).Append("\n");
            sb.Append("  AutomationName: ").Append(AutomationName).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  AutomationID: ").Append(AutomationID).Append("\n");
            sb.Append("  AgentID: ").Append(AgentID).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  CompletedOn: ").Append(CompletedOn).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  TriggerDetails: ").Append(TriggerDetails).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutomationExecutionViewModel);
        }

        /// <summary>
        /// Returns true if AutomationExecutionViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AutomationExecutionViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutomationExecutionViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AgentName == input.AgentName ||
                    (this.AgentName != null &&
                    this.AgentName.Equals(input.AgentName))
                ) && 
                (
                    this.AutomationName == input.AutomationName ||
                    (this.AutomationName != null &&
                    this.AutomationName.Equals(input.AutomationName))
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.AutomationID == input.AutomationID ||
                    (this.AutomationID != null &&
                    this.AutomationID.Equals(input.AutomationID))
                ) && 
                (
                    this.AgentID == input.AgentID ||
                    (this.AgentID != null &&
                    this.AgentID.Equals(input.AgentID))
                ) && 
                (
                    this.StartedOn == input.StartedOn ||
                    (this.StartedOn != null &&
                    this.StartedOn.Equals(input.StartedOn))
                ) && 
                (
                    this.CompletedOn == input.CompletedOn ||
                    (this.CompletedOn != null &&
                    this.CompletedOn.Equals(input.CompletedOn))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.TriggerDetails == input.TriggerDetails ||
                    (this.TriggerDetails != null &&
                    this.TriggerDetails.Equals(input.TriggerDetails))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.HasErrors == input.HasErrors ||
                    (this.HasErrors != null &&
                    this.HasErrors.Equals(input.HasErrors))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    (this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(input.ErrorDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AgentName != null)
                    hashCode = hashCode * 59 + this.AgentName.GetHashCode();
                if (this.AutomationName != null)
                    hashCode = hashCode * 59 + this.AutomationName.GetHashCode();
                if (this.JobID != null)
                    hashCode = hashCode * 59 + this.JobID.GetHashCode();
                if (this.AutomationID != null)
                    hashCode = hashCode * 59 + this.AutomationID.GetHashCode();
                if (this.AgentID != null)
                    hashCode = hashCode * 59 + this.AgentID.GetHashCode();
                if (this.StartedOn != null)
                    hashCode = hashCode * 59 + this.StartedOn.GetHashCode();
                if (this.CompletedOn != null)
                    hashCode = hashCode * 59 + this.CompletedOn.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.TriggerDetails != null)
                    hashCode = hashCode * 59 + this.TriggerDetails.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.HasErrors != null)
                    hashCode = hashCode * 59 + this.HasErrors.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ErrorDetails != null)
                    hashCode = hashCode * 59 + this.ErrorDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
