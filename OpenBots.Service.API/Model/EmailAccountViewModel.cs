/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// EmailAccountViewModel
    /// </summary>
    [DataContract]
        public partial class EmailAccountViewModel :  IEquatable<EmailAccountViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAccountViewModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="isDisabled">isDisabled.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="provider">provider.</param>
        /// <param name="isSslEnabled">isSslEnabled.</param>
        /// <param name="host">host.</param>
        /// <param name="port">port.</param>
        /// <param name="username">username.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="fromEmailAddress">fromEmailAddress.</param>
        /// <param name="fromName">fromName.</param>
        /// <param name="startOnUTC">startOnUTC.</param>
        /// <param name="endOnUTC">endOnUTC.</param>
        public EmailAccountViewModel(Guid? id = default(Guid?), string name = default(string), bool? isDisabled = default(bool?), bool? isDefault = default(bool?), string provider = default(string), bool? isSslEnabled = default(bool?), string host = default(string), int? port = default(int?), string username = default(string), string passwordHash = default(string), string apiKey = default(string), string fromEmailAddress = default(string), string fromName = default(string), DateTime? startOnUTC = default(DateTime?), DateTime? endOnUTC = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.IsDisabled = isDisabled;
            this.IsDefault = isDefault;
            this.Provider = provider;
            this.IsSslEnabled = isSslEnabled;
            this.Host = host;
            this.Port = port;
            this.Username = username;
            this.PasswordHash = passwordHash;
            this.ApiKey = apiKey;
            this.FromEmailAddress = fromEmailAddress;
            this.FromName = fromName;
            this.StartOnUTC = startOnUTC;
            this.EndOnUTC = endOnUTC;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name="isDisabled", EmitDefaultValue=false)]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets IsSslEnabled
        /// </summary>
        [DataMember(Name="isSslEnabled", EmitDefaultValue=false)]
        public bool? IsSslEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name="passwordHash", EmitDefaultValue=false)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="apiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets FromEmailAddress
        /// </summary>
        [DataMember(Name="fromEmailAddress", EmitDefaultValue=false)]
        public string FromEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets FromName
        /// </summary>
        [DataMember(Name="fromName", EmitDefaultValue=false)]
        public string FromName { get; set; }

        /// <summary>
        /// Gets or Sets StartOnUTC
        /// </summary>
        [DataMember(Name="startOnUTC", EmitDefaultValue=false)]
        public DateTime? StartOnUTC { get; set; }

        /// <summary>
        /// Gets or Sets EndOnUTC
        /// </summary>
        [DataMember(Name="endOnUTC", EmitDefaultValue=false)]
        public DateTime? EndOnUTC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailAccountViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  IsSslEnabled: ").Append(IsSslEnabled).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  FromEmailAddress: ").Append(FromEmailAddress).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  StartOnUTC: ").Append(StartOnUTC).Append("\n");
            sb.Append("  EndOnUTC: ").Append(EndOnUTC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailAccountViewModel);
        }

        /// <summary>
        /// Returns true if EmailAccountViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailAccountViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAccountViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.IsSslEnabled == input.IsSslEnabled ||
                    (this.IsSslEnabled != null &&
                    this.IsSslEnabled.Equals(input.IsSslEnabled))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.PasswordHash == input.PasswordHash ||
                    (this.PasswordHash != null &&
                    this.PasswordHash.Equals(input.PasswordHash))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.FromEmailAddress == input.FromEmailAddress ||
                    (this.FromEmailAddress != null &&
                    this.FromEmailAddress.Equals(input.FromEmailAddress))
                ) && 
                (
                    this.FromName == input.FromName ||
                    (this.FromName != null &&
                    this.FromName.Equals(input.FromName))
                ) && 
                (
                    this.StartOnUTC == input.StartOnUTC ||
                    (this.StartOnUTC != null &&
                    this.StartOnUTC.Equals(input.StartOnUTC))
                ) && 
                (
                    this.EndOnUTC == input.EndOnUTC ||
                    (this.EndOnUTC != null &&
                    this.EndOnUTC.Equals(input.EndOnUTC))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.IsSslEnabled != null)
                    hashCode = hashCode * 59 + this.IsSslEnabled.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.PasswordHash != null)
                    hashCode = hashCode * 59 + this.PasswordHash.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.FromEmailAddress != null)
                    hashCode = hashCode * 59 + this.FromEmailAddress.GetHashCode();
                if (this.FromName != null)
                    hashCode = hashCode * 59 + this.FromName.GetHashCode();
                if (this.StartOnUTC != null)
                    hashCode = hashCode * 59 + this.StartOnUTC.GetHashCode();
                if (this.EndOnUTC != null)
                    hashCode = hashCode * 59 + this.EndOnUTC.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
