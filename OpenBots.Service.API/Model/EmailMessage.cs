/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// MailMessageStub is a simple serializable Stub for a Email message  This would serve as a translation between various formats of mail messages   eg.: Aspose, System.Net, Amazon SES, Outlook etc.  It can be serialized to a JSON object and can be stored in Entity or Blob Storage
    /// </summary>
    [DataContract]
        public partial class EmailMessage :  IEquatable<EmailMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailMessage" /> class.
        /// </summary>
        /// <param name="messageID">messageID.</param>
        /// <param name="inReplyToMessageID">inReplyToMessageID.</param>
        /// <param name="messageTopic">messageTopic.</param>
        /// <param name="recievedOnUTC">recievedOnUTC.</param>
        /// <param name="from">from.</param>
        /// <param name="sender">sender.</param>
        /// <param name="to">to.</param>
        /// <param name="cc">cc.</param>
        /// <param name="bcc">bcc.</param>
        /// <param name="replyToList">replyToList.</param>
        /// <param name="source">source.</param>
        /// <param name="isPossibleSpam">isPossibleSpam.</param>
        /// <param name="isPossibleVirus">isPossibleVirus.</param>
        /// <param name="priority">priority.</param>
        /// <param name="subject">subject.</param>
        /// <param name="plainTextBody">plainTextBody.</param>
        /// <param name="body">body.</param>
        /// <param name="isBodyHtml">isBodyHtml.</param>
        /// <param name="isBodyContentStored">isBodyContentStored.</param>
        /// <param name="bodyContentStorageAddress">bodyContentStorageAddress.</param>
        /// <param name="headers">headers.</param>
        /// <param name="deliveryNotificationOptions">deliveryNotificationOptions.</param>
        /// <param name="attachments">attachments.</param>
        public EmailMessage(string messageID = default(string), string inReplyToMessageID = default(string), string messageTopic = default(string), DateTime? recievedOnUTC = default(DateTime?), List<EmailAddress> from = default(List<EmailAddress>), EmailAddress sender = default(EmailAddress), List<EmailAddress> to = default(List<EmailAddress>), List<EmailAddress> cc = default(List<EmailAddress>), List<EmailAddress> bcc = default(List<EmailAddress>), List<EmailAddress> replyToList = default(List<EmailAddress>), string source = default(string), bool? isPossibleSpam = default(bool?), bool? isPossibleVirus = default(bool?), int? priority = default(int?), string subject = default(string), string plainTextBody = default(string), string body = default(string), bool? isBodyHtml = default(bool?), string isBodyContentStored = default(string), string bodyContentStorageAddress = default(string), List<EmailHeader> headers = default(List<EmailHeader>), int? deliveryNotificationOptions = default(int?), List<EmailAttachment> attachments = default(List<EmailAttachment>))
        {
            this.MessageID = messageID;
            this.InReplyToMessageID = inReplyToMessageID;
            this.MessageTopic = messageTopic;
            this.RecievedOnUTC = recievedOnUTC;
            this.From = from;
            this.Sender = sender;
            this.To = to;
            this.Cc = cc;
            this.Bcc = bcc;
            this.ReplyToList = replyToList;
            this.Source = source;
            this.IsPossibleSpam = isPossibleSpam;
            this.IsPossibleVirus = isPossibleVirus;
            this.Priority = priority;
            this.Subject = subject;
            this.PlainTextBody = plainTextBody;
            this.Body = body;
            this.IsBodyHtml = isBodyHtml;
            this.IsBodyContentStored = isBodyContentStored;
            this.BodyContentStorageAddress = bodyContentStorageAddress;
            this.Headers = headers;
            this.DeliveryNotificationOptions = deliveryNotificationOptions;
            this.Attachments = attachments;
        }
        
        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name="messageID", EmitDefaultValue=false)]
        public string MessageID { get; set; }

        /// <summary>
        /// Gets or Sets InReplyToMessageID
        /// </summary>
        [DataMember(Name="inReplyToMessageID", EmitDefaultValue=false)]
        public string InReplyToMessageID { get; set; }

        /// <summary>
        /// Gets or Sets MessageTopic
        /// </summary>
        [DataMember(Name="messageTopic", EmitDefaultValue=false)]
        public string MessageTopic { get; set; }

        /// <summary>
        /// Gets or Sets RecievedOnUTC
        /// </summary>
        [DataMember(Name="recievedOnUTC", EmitDefaultValue=false)]
        public DateTime? RecievedOnUTC { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public List<EmailAddress> From { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public EmailAddress Sender { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<EmailAddress> To { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public List<EmailAddress> Cc { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [DataMember(Name="bcc", EmitDefaultValue=false)]
        public List<EmailAddress> Bcc { get; set; }

        /// <summary>
        /// Gets or Sets ReplyToList
        /// </summary>
        [DataMember(Name="replyToList", EmitDefaultValue=false)]
        public List<EmailAddress> ReplyToList { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets IsPossibleSpam
        /// </summary>
        [DataMember(Name="isPossibleSpam", EmitDefaultValue=false)]
        public bool? IsPossibleSpam { get; set; }

        /// <summary>
        /// Gets or Sets IsPossibleVirus
        /// </summary>
        [DataMember(Name="isPossibleVirus", EmitDefaultValue=false)]
        public bool? IsPossibleVirus { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets PlainTextBody
        /// </summary>
        [DataMember(Name="plainTextBody", EmitDefaultValue=false)]
        public string PlainTextBody { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets IsBodyHtml
        /// </summary>
        [DataMember(Name="isBodyHtml", EmitDefaultValue=false)]
        public bool? IsBodyHtml { get; set; }

        /// <summary>
        /// Gets or Sets IsBodyContentStored
        /// </summary>
        [DataMember(Name="isBodyContentStored", EmitDefaultValue=false)]
        public string IsBodyContentStored { get; set; }

        /// <summary>
        /// Gets or Sets BodyContentStorageAddress
        /// </summary>
        [DataMember(Name="bodyContentStorageAddress", EmitDefaultValue=false)]
        public string BodyContentStorageAddress { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public List<EmailHeader> Headers { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryNotificationOptions
        /// </summary>
        [DataMember(Name="deliveryNotificationOptions", EmitDefaultValue=false)]
        public int? DeliveryNotificationOptions { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<EmailAttachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailMessage {\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  InReplyToMessageID: ").Append(InReplyToMessageID).Append("\n");
            sb.Append("  MessageTopic: ").Append(MessageTopic).Append("\n");
            sb.Append("  RecievedOnUTC: ").Append(RecievedOnUTC).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  ReplyToList: ").Append(ReplyToList).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  IsPossibleSpam: ").Append(IsPossibleSpam).Append("\n");
            sb.Append("  IsPossibleVirus: ").Append(IsPossibleVirus).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  PlainTextBody: ").Append(PlainTextBody).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  IsBodyHtml: ").Append(IsBodyHtml).Append("\n");
            sb.Append("  IsBodyContentStored: ").Append(IsBodyContentStored).Append("\n");
            sb.Append("  BodyContentStorageAddress: ").Append(BodyContentStorageAddress).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  DeliveryNotificationOptions: ").Append(DeliveryNotificationOptions).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailMessage);
        }

        /// <summary>
        /// Returns true if EmailMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MessageID == input.MessageID ||
                    (this.MessageID != null &&
                    this.MessageID.Equals(input.MessageID))
                ) && 
                (
                    this.InReplyToMessageID == input.InReplyToMessageID ||
                    (this.InReplyToMessageID != null &&
                    this.InReplyToMessageID.Equals(input.InReplyToMessageID))
                ) && 
                (
                    this.MessageTopic == input.MessageTopic ||
                    (this.MessageTopic != null &&
                    this.MessageTopic.Equals(input.MessageTopic))
                ) && 
                (
                    this.RecievedOnUTC == input.RecievedOnUTC ||
                    (this.RecievedOnUTC != null &&
                    this.RecievedOnUTC.Equals(input.RecievedOnUTC))
                ) && 
                (
                    this.From == input.From ||
                    this.From != null &&
                    input.From != null &&
                    this.From.SequenceEqual(input.From)
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    input.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    this.Bcc != null &&
                    input.Bcc != null &&
                    this.Bcc.SequenceEqual(input.Bcc)
                ) && 
                (
                    this.ReplyToList == input.ReplyToList ||
                    this.ReplyToList != null &&
                    input.ReplyToList != null &&
                    this.ReplyToList.SequenceEqual(input.ReplyToList)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.IsPossibleSpam == input.IsPossibleSpam ||
                    (this.IsPossibleSpam != null &&
                    this.IsPossibleSpam.Equals(input.IsPossibleSpam))
                ) && 
                (
                    this.IsPossibleVirus == input.IsPossibleVirus ||
                    (this.IsPossibleVirus != null &&
                    this.IsPossibleVirus.Equals(input.IsPossibleVirus))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.PlainTextBody == input.PlainTextBody ||
                    (this.PlainTextBody != null &&
                    this.PlainTextBody.Equals(input.PlainTextBody))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.IsBodyHtml == input.IsBodyHtml ||
                    (this.IsBodyHtml != null &&
                    this.IsBodyHtml.Equals(input.IsBodyHtml))
                ) && 
                (
                    this.IsBodyContentStored == input.IsBodyContentStored ||
                    (this.IsBodyContentStored != null &&
                    this.IsBodyContentStored.Equals(input.IsBodyContentStored))
                ) && 
                (
                    this.BodyContentStorageAddress == input.BodyContentStorageAddress ||
                    (this.BodyContentStorageAddress != null &&
                    this.BodyContentStorageAddress.Equals(input.BodyContentStorageAddress))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.DeliveryNotificationOptions == input.DeliveryNotificationOptions ||
                    (this.DeliveryNotificationOptions != null &&
                    this.DeliveryNotificationOptions.Equals(input.DeliveryNotificationOptions))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageID != null)
                    hashCode = hashCode * 59 + this.MessageID.GetHashCode();
                if (this.InReplyToMessageID != null)
                    hashCode = hashCode * 59 + this.InReplyToMessageID.GetHashCode();
                if (this.MessageTopic != null)
                    hashCode = hashCode * 59 + this.MessageTopic.GetHashCode();
                if (this.RecievedOnUTC != null)
                    hashCode = hashCode * 59 + this.RecievedOnUTC.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.ReplyToList != null)
                    hashCode = hashCode * 59 + this.ReplyToList.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.IsPossibleSpam != null)
                    hashCode = hashCode * 59 + this.IsPossibleSpam.GetHashCode();
                if (this.IsPossibleVirus != null)
                    hashCode = hashCode * 59 + this.IsPossibleVirus.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.PlainTextBody != null)
                    hashCode = hashCode * 59 + this.PlainTextBody.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.IsBodyHtml != null)
                    hashCode = hashCode * 59 + this.IsBodyHtml.GetHashCode();
                if (this.IsBodyContentStored != null)
                    hashCode = hashCode * 59 + this.IsBodyContentStored.GetHashCode();
                if (this.BodyContentStorageAddress != null)
                    hashCode = hashCode * 59 + this.BodyContentStorageAddress.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.DeliveryNotificationOptions != null)
                    hashCode = hashCode * 59 + this.DeliveryNotificationOptions.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
