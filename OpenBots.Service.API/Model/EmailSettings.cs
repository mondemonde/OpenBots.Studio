/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// EmailSettings
    /// </summary>
    [DataContract]
        public partial class EmailSettings :  IEquatable<EmailSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSettings" /> class.
        /// </summary>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="isEmailDisabled">isEmailDisabled.</param>
        /// <param name="addToAddress">addToAddress.</param>
        /// <param name="addCCAddress">addCCAddress.</param>
        /// <param name="addBCCAddress">addBCCAddress.</param>
        /// <param name="allowedDomains">allowedDomains.</param>
        /// <param name="blockedDomains">blockedDomains.</param>
        /// <param name="subjectAddPrefix">subjectAddPrefix.</param>
        /// <param name="subjectAddSuffix">subjectAddSuffix.</param>
        /// <param name="bodyAddPrefix">bodyAddPrefix.</param>
        /// <param name="bodyAddSuffix">bodyAddSuffix.</param>
        /// <param name="id">id.</param>
        /// <param name="isDeleted">isDeleted (default to false).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deleteOn">deleteOn.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="updatedOn">updatedOn.</param>
        /// <param name="updatedBy">updatedBy.</param>
        public EmailSettings(Guid? organizationId = default(Guid?), bool? isEmailDisabled = default(bool?), string addToAddress = default(string), string addCCAddress = default(string), string addBCCAddress = default(string), string allowedDomains = default(string), string blockedDomains = default(string), string subjectAddPrefix = default(string), string subjectAddSuffix = default(string), string bodyAddPrefix = default(string), string bodyAddSuffix = default(string), Guid? id = default(Guid?), bool? isDeleted = false, string createdBy = default(string), DateTime? createdOn = default(DateTime?), string deletedBy = default(string), DateTime? deleteOn = default(DateTime?), byte[] timestamp = default(byte[]), DateTime? updatedOn = default(DateTime?), string updatedBy = default(string))
        {
            this.OrganizationId = organizationId;
            this.IsEmailDisabled = isEmailDisabled;
            this.AddToAddress = addToAddress;
            this.AddCCAddress = addCCAddress;
            this.AddBCCAddress = addBCCAddress;
            this.AllowedDomains = allowedDomains;
            this.BlockedDomains = blockedDomains;
            this.SubjectAddPrefix = subjectAddPrefix;
            this.SubjectAddSuffix = subjectAddSuffix;
            this.BodyAddPrefix = bodyAddPrefix;
            this.BodyAddSuffix = bodyAddSuffix;
            this.Id = id;
            // use default value if no "isDeleted" provided
            if (isDeleted == null)
            {
                this.IsDeleted = false;
            }
            else
            {
                this.IsDeleted = isDeleted;
            }
            this.CreatedBy = createdBy;
            this.CreatedOn = createdOn;
            this.DeletedBy = deletedBy;
            this.DeleteOn = deleteOn;
            this.Timestamp = timestamp;
            this.UpdatedOn = updatedOn;
            this.UpdatedBy = updatedBy;
        }
        
        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets IsEmailDisabled
        /// </summary>
        [DataMember(Name="isEmailDisabled", EmitDefaultValue=false)]
        public bool? IsEmailDisabled { get; set; }

        /// <summary>
        /// Gets or Sets AddToAddress
        /// </summary>
        [DataMember(Name="addToAddress", EmitDefaultValue=false)]
        public string AddToAddress { get; set; }

        /// <summary>
        /// Gets or Sets AddCCAddress
        /// </summary>
        [DataMember(Name="addCCAddress", EmitDefaultValue=false)]
        public string AddCCAddress { get; set; }

        /// <summary>
        /// Gets or Sets AddBCCAddress
        /// </summary>
        [DataMember(Name="addBCCAddress", EmitDefaultValue=false)]
        public string AddBCCAddress { get; set; }

        /// <summary>
        /// Gets or Sets AllowedDomains
        /// </summary>
        [DataMember(Name="allowedDomains", EmitDefaultValue=false)]
        public string AllowedDomains { get; set; }

        /// <summary>
        /// Gets or Sets BlockedDomains
        /// </summary>
        [DataMember(Name="blockedDomains", EmitDefaultValue=false)]
        public string BlockedDomains { get; set; }

        /// <summary>
        /// Gets or Sets SubjectAddPrefix
        /// </summary>
        [DataMember(Name="subjectAddPrefix", EmitDefaultValue=false)]
        public string SubjectAddPrefix { get; set; }

        /// <summary>
        /// Gets or Sets SubjectAddSuffix
        /// </summary>
        [DataMember(Name="subjectAddSuffix", EmitDefaultValue=false)]
        public string SubjectAddSuffix { get; set; }

        /// <summary>
        /// Gets or Sets BodyAddPrefix
        /// </summary>
        [DataMember(Name="bodyAddPrefix", EmitDefaultValue=false)]
        public string BodyAddPrefix { get; set; }

        /// <summary>
        /// Gets or Sets BodyAddSuffix
        /// </summary>
        [DataMember(Name="bodyAddSuffix", EmitDefaultValue=false)]
        public string BodyAddSuffix { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=false)]
        public string DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeleteOn
        /// </summary>
        [DataMember(Name="deleteOn", EmitDefaultValue=false)]
        public DateTime? DeleteOn { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedOn
        /// </summary>
        [DataMember(Name="updatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailSettings {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  IsEmailDisabled: ").Append(IsEmailDisabled).Append("\n");
            sb.Append("  AddToAddress: ").Append(AddToAddress).Append("\n");
            sb.Append("  AddCCAddress: ").Append(AddCCAddress).Append("\n");
            sb.Append("  AddBCCAddress: ").Append(AddBCCAddress).Append("\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  BlockedDomains: ").Append(BlockedDomains).Append("\n");
            sb.Append("  SubjectAddPrefix: ").Append(SubjectAddPrefix).Append("\n");
            sb.Append("  SubjectAddSuffix: ").Append(SubjectAddSuffix).Append("\n");
            sb.Append("  BodyAddPrefix: ").Append(BodyAddPrefix).Append("\n");
            sb.Append("  BodyAddSuffix: ").Append(BodyAddSuffix).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeleteOn: ").Append(DeleteOn).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailSettings);
        }

        /// <summary>
        /// Returns true if EmailSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.IsEmailDisabled == input.IsEmailDisabled ||
                    (this.IsEmailDisabled != null &&
                    this.IsEmailDisabled.Equals(input.IsEmailDisabled))
                ) && 
                (
                    this.AddToAddress == input.AddToAddress ||
                    (this.AddToAddress != null &&
                    this.AddToAddress.Equals(input.AddToAddress))
                ) && 
                (
                    this.AddCCAddress == input.AddCCAddress ||
                    (this.AddCCAddress != null &&
                    this.AddCCAddress.Equals(input.AddCCAddress))
                ) && 
                (
                    this.AddBCCAddress == input.AddBCCAddress ||
                    (this.AddBCCAddress != null &&
                    this.AddBCCAddress.Equals(input.AddBCCAddress))
                ) && 
                (
                    this.AllowedDomains == input.AllowedDomains ||
                    (this.AllowedDomains != null &&
                    this.AllowedDomains.Equals(input.AllowedDomains))
                ) && 
                (
                    this.BlockedDomains == input.BlockedDomains ||
                    (this.BlockedDomains != null &&
                    this.BlockedDomains.Equals(input.BlockedDomains))
                ) && 
                (
                    this.SubjectAddPrefix == input.SubjectAddPrefix ||
                    (this.SubjectAddPrefix != null &&
                    this.SubjectAddPrefix.Equals(input.SubjectAddPrefix))
                ) && 
                (
                    this.SubjectAddSuffix == input.SubjectAddSuffix ||
                    (this.SubjectAddSuffix != null &&
                    this.SubjectAddSuffix.Equals(input.SubjectAddSuffix))
                ) && 
                (
                    this.BodyAddPrefix == input.BodyAddPrefix ||
                    (this.BodyAddPrefix != null &&
                    this.BodyAddPrefix.Equals(input.BodyAddPrefix))
                ) && 
                (
                    this.BodyAddSuffix == input.BodyAddSuffix ||
                    (this.BodyAddSuffix != null &&
                    this.BodyAddSuffix.Equals(input.BodyAddSuffix))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeleteOn == input.DeleteOn ||
                    (this.DeleteOn != null &&
                    this.DeleteOn.Equals(input.DeleteOn))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    (this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(input.UpdatedOn))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.IsEmailDisabled != null)
                    hashCode = hashCode * 59 + this.IsEmailDisabled.GetHashCode();
                if (this.AddToAddress != null)
                    hashCode = hashCode * 59 + this.AddToAddress.GetHashCode();
                if (this.AddCCAddress != null)
                    hashCode = hashCode * 59 + this.AddCCAddress.GetHashCode();
                if (this.AddBCCAddress != null)
                    hashCode = hashCode * 59 + this.AddBCCAddress.GetHashCode();
                if (this.AllowedDomains != null)
                    hashCode = hashCode * 59 + this.AllowedDomains.GetHashCode();
                if (this.BlockedDomains != null)
                    hashCode = hashCode * 59 + this.BlockedDomains.GetHashCode();
                if (this.SubjectAddPrefix != null)
                    hashCode = hashCode * 59 + this.SubjectAddPrefix.GetHashCode();
                if (this.SubjectAddSuffix != null)
                    hashCode = hashCode * 59 + this.SubjectAddSuffix.GetHashCode();
                if (this.BodyAddPrefix != null)
                    hashCode = hashCode * 59 + this.BodyAddPrefix.GetHashCode();
                if (this.BodyAddSuffix != null)
                    hashCode = hashCode * 59 + this.BodyAddSuffix.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeleteOn != null)
                    hashCode = hashCode * 59 + this.DeleteOn.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.UpdatedOn != null)
                    hashCode = hashCode * 59 + this.UpdatedOn.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
