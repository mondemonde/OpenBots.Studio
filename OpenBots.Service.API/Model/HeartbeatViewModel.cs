/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// HeartbeatViewModel
    /// </summary>
    [DataContract]
        public partial class HeartbeatViewModel :  IEquatable<HeartbeatViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HeartbeatViewModel" /> class.
        /// </summary>
        /// <param name="lastReportedOn">lastReportedOn.</param>
        /// <param name="lastReportedStatus">lastReportedStatus.</param>
        /// <param name="lastReportedWork">lastReportedWork.</param>
        /// <param name="lastReportedMessage">lastReportedMessage.</param>
        /// <param name="isHealthy">isHealthy.</param>
        public HeartbeatViewModel(DateTime? lastReportedOn = default(DateTime?), string lastReportedStatus = default(string), string lastReportedWork = default(string), string lastReportedMessage = default(string), bool? isHealthy = default(bool?))
        {
            this.LastReportedOn = lastReportedOn;
            this.LastReportedStatus = lastReportedStatus;
            this.LastReportedWork = lastReportedWork;
            this.LastReportedMessage = lastReportedMessage;
            this.IsHealthy = isHealthy;
        }
        
        /// <summary>
        /// Gets or Sets LastReportedOn
        /// </summary>
        [DataMember(Name="lastReportedOn", EmitDefaultValue=false)]
        public DateTime? LastReportedOn { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedStatus
        /// </summary>
        [DataMember(Name="lastReportedStatus", EmitDefaultValue=false)]
        public string LastReportedStatus { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedWork
        /// </summary>
        [DataMember(Name="lastReportedWork", EmitDefaultValue=false)]
        public string LastReportedWork { get; set; }

        /// <summary>
        /// Gets or Sets LastReportedMessage
        /// </summary>
        [DataMember(Name="lastReportedMessage", EmitDefaultValue=false)]
        public string LastReportedMessage { get; set; }

        /// <summary>
        /// Gets or Sets IsHealthy
        /// </summary>
        [DataMember(Name="isHealthy", EmitDefaultValue=false)]
        public bool? IsHealthy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HeartbeatViewModel {\n");
            sb.Append("  LastReportedOn: ").Append(LastReportedOn).Append("\n");
            sb.Append("  LastReportedStatus: ").Append(LastReportedStatus).Append("\n");
            sb.Append("  LastReportedWork: ").Append(LastReportedWork).Append("\n");
            sb.Append("  LastReportedMessage: ").Append(LastReportedMessage).Append("\n");
            sb.Append("  IsHealthy: ").Append(IsHealthy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HeartbeatViewModel);
        }

        /// <summary>
        /// Returns true if HeartbeatViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of HeartbeatViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeartbeatViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastReportedOn == input.LastReportedOn ||
                    (this.LastReportedOn != null &&
                    this.LastReportedOn.Equals(input.LastReportedOn))
                ) && 
                (
                    this.LastReportedStatus == input.LastReportedStatus ||
                    (this.LastReportedStatus != null &&
                    this.LastReportedStatus.Equals(input.LastReportedStatus))
                ) && 
                (
                    this.LastReportedWork == input.LastReportedWork ||
                    (this.LastReportedWork != null &&
                    this.LastReportedWork.Equals(input.LastReportedWork))
                ) && 
                (
                    this.LastReportedMessage == input.LastReportedMessage ||
                    (this.LastReportedMessage != null &&
                    this.LastReportedMessage.Equals(input.LastReportedMessage))
                ) && 
                (
                    this.IsHealthy == input.IsHealthy ||
                    (this.IsHealthy != null &&
                    this.IsHealthy.Equals(input.IsHealthy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastReportedOn != null)
                    hashCode = hashCode * 59 + this.LastReportedOn.GetHashCode();
                if (this.LastReportedStatus != null)
                    hashCode = hashCode * 59 + this.LastReportedStatus.GetHashCode();
                if (this.LastReportedWork != null)
                    hashCode = hashCode * 59 + this.LastReportedWork.GetHashCode();
                if (this.LastReportedMessage != null)
                    hashCode = hashCode * 59 + this.LastReportedMessage.GetHashCode();
                if (this.IsHealthy != null)
                    hashCode = hashCode * 59 + this.IsHealthy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
