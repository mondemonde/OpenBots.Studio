/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// JobAutomationLookup
    /// </summary>
    [DataContract]
        public partial class JobAutomationLookup :  IEquatable<JobAutomationLookup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobAutomationLookup" /> class.
        /// </summary>
        /// <param name="automationId">automationId.</param>
        /// <param name="automationName">automationName.</param>
        /// <param name="automationNameWithVersion">automationNameWithVersion.</param>
        public JobAutomationLookup(Guid? automationId = default(Guid?), string automationName = default(string), string automationNameWithVersion = default(string))
        {
            this.AutomationId = automationId;
            this.AutomationName = automationName;
            this.AutomationNameWithVersion = automationNameWithVersion;
        }
        
        /// <summary>
        /// Gets or Sets AutomationId
        /// </summary>
        [DataMember(Name="automationId", EmitDefaultValue=false)]
        public Guid? AutomationId { get; set; }

        /// <summary>
        /// Gets or Sets AutomationName
        /// </summary>
        [DataMember(Name="automationName", EmitDefaultValue=false)]
        public string AutomationName { get; set; }

        /// <summary>
        /// Gets or Sets AutomationNameWithVersion
        /// </summary>
        [DataMember(Name="automationNameWithVersion", EmitDefaultValue=false)]
        public string AutomationNameWithVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobAutomationLookup {\n");
            sb.Append("  AutomationId: ").Append(AutomationId).Append("\n");
            sb.Append("  AutomationName: ").Append(AutomationName).Append("\n");
            sb.Append("  AutomationNameWithVersion: ").Append(AutomationNameWithVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobAutomationLookup);
        }

        /// <summary>
        /// Returns true if JobAutomationLookup instances are equal
        /// </summary>
        /// <param name="input">Instance of JobAutomationLookup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobAutomationLookup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutomationId == input.AutomationId ||
                    (this.AutomationId != null &&
                    this.AutomationId.Equals(input.AutomationId))
                ) && 
                (
                    this.AutomationName == input.AutomationName ||
                    (this.AutomationName != null &&
                    this.AutomationName.Equals(input.AutomationName))
                ) && 
                (
                    this.AutomationNameWithVersion == input.AutomationNameWithVersion ||
                    (this.AutomationNameWithVersion != null &&
                    this.AutomationNameWithVersion.Equals(input.AutomationNameWithVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutomationId != null)
                    hashCode = hashCode * 59 + this.AutomationId.GetHashCode();
                if (this.AutomationName != null)
                    hashCode = hashCode * 59 + this.AutomationName.GetHashCode();
                if (this.AutomationNameWithVersion != null)
                    hashCode = hashCode * 59 + this.AutomationNameWithVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
