/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// JobErrorViewModel
    /// </summary>
    [DataContract]
        public partial class JobErrorViewModel :  IEquatable<JobErrorViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobErrorViewModel" /> class.
        /// </summary>
        /// <param name="errorReason">errorReason.</param>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="serializedErrorString">serializedErrorString.</param>
        public JobErrorViewModel(string errorReason = default(string), string errorCode = default(string), string serializedErrorString = default(string))
        {
            this.ErrorReason = errorReason;
            this.ErrorCode = errorCode;
            this.SerializedErrorString = serializedErrorString;
        }
        
        /// <summary>
        /// Gets or Sets ErrorReason
        /// </summary>
        [DataMember(Name="errorReason", EmitDefaultValue=false)]
        public string ErrorReason { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets SerializedErrorString
        /// </summary>
        [DataMember(Name="serializedErrorString", EmitDefaultValue=false)]
        public string SerializedErrorString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobErrorViewModel {\n");
            sb.Append("  ErrorReason: ").Append(ErrorReason).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  SerializedErrorString: ").Append(SerializedErrorString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobErrorViewModel);
        }

        /// <summary>
        /// Returns true if JobErrorViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of JobErrorViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobErrorViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorReason == input.ErrorReason ||
                    (this.ErrorReason != null &&
                    this.ErrorReason.Equals(input.ErrorReason))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.SerializedErrorString == input.SerializedErrorString ||
                    (this.SerializedErrorString != null &&
                    this.SerializedErrorString.Equals(input.SerializedErrorString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorReason != null)
                    hashCode = hashCode * 59 + this.ErrorReason.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.SerializedErrorString != null)
                    hashCode = hashCode * 59 + this.SerializedErrorString.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
