/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// LoginResponseModel
    /// </summary>
    [DataContract]
    public partial class LoginResponseModel : IEquatable<LoginResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResponseModel" /> class.
        /// </summary>
        /// <param name="userName">userName (required).</param>
        /// <param name="token">token (required).</param>
        /// <param name="refreshToken">token (required).</param>
        /// <param name="agent">token (required).</param>
        public LoginResponseModel(string userName = default(string), string token = default(string), 
                                  string refreshToken = default(string), string agent = default(string))
        {
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new InvalidDataException("userName is a required property for LoginResponseModel and cannot be null");
            }
            else
            {
                this.UserName = userName;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for LoginResponseModel and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            // to ensure "refreshToken" is required (not null)
            if (refreshToken == null)
            {
                throw new InvalidDataException("refreshToken is a required property for LoginResponseModel and cannot be null");
            }
            else
            {
                this.RefreshToken = refreshToken;
            }

            this.AgentId = agent;
        }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets refreshToken
        /// </summary>
        [DataMember(Name = "refreshToken", EmitDefaultValue = false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets token
        /// </summary>
        [DataMember(Name = "agent", EmitDefaultValue = false)]
        public string AgentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginResponseModel {\n");
            sb.Append("  userName: ").Append(UserName).Append("\n");
            sb.Append("  token: ").Append(Token).Append("\n");
            sb.Append("  refreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  agent: ").Append(AgentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginResponseModel);
        }

        /// <summary>
        /// Returns true if LoginResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginResponseModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) &&
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) &&
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) &&
                (
                    this.AgentId == input.AgentId ||
                    (this.AgentId != null &&
                    this.AgentId.Equals(input.AgentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.AgentId != null)
                    hashCode = hashCode * 59 + this.AgentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
