/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// NextJobViewModel
    /// </summary>
    [DataContract]
    public partial class NextJobViewModel : IEquatable<NextJobViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextJobViewModel" /> class.
        /// </summary>
        /// <param name="isJobAvailable">isJobAvailable.</param>
        /// <param name="assignedJob">assignedJob.</param>
        /// <param name="jobParameters">jobParameters.</param>
        public NextJobViewModel(bool? isJobAvailable = default(bool?), Job assignedJob = default(Job), List<JobParameter> jobParameters = default(List<JobParameter>))
        {
            this.IsJobAvailable = isJobAvailable;
            this.AssignedJob = assignedJob;
            this.JobParameters = jobParameters;
        }

        /// <summary>
        /// Gets or Sets IsJobAvailable
        /// </summary>
        [DataMember(Name = "isJobAvailable", EmitDefaultValue = false)]
        public bool? IsJobAvailable { get; set; }

        /// <summary>
        /// Gets or Sets AssignedJob
        /// </summary>
        [DataMember(Name = "assignedJob", EmitDefaultValue = false)]
        public Job AssignedJob { get; set; }

        /// <summary>
        /// Gets or Sets JobParameters
        /// </summary>
        [DataMember(Name = "jobParameters", EmitDefaultValue = false)]
        public List<JobParameter> JobParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextJobViewModel {\n");
            sb.Append("  IsJobAvailable: ").Append(IsJobAvailable).Append("\n");
            sb.Append("  AssignedJob: ").Append(AssignedJob).Append("\n");
            sb.Append("  JobParameters: ").Append(JobParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextJobViewModel);
        }

        /// <summary>
        /// Returns true if NextJobViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of NextJobViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextJobViewModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.IsJobAvailable == input.IsJobAvailable ||
                    (this.IsJobAvailable != null &&
                    this.IsJobAvailable.Equals(input.IsJobAvailable))
                ) &&
                (
                    this.AssignedJob == input.AssignedJob ||
                    (this.AssignedJob != null &&
                    this.AssignedJob.Equals(input.AssignedJob))
                ) &&
                (
                    this.JobParameters == input.JobParameters ||
                    this.JobParameters != null &&
                    input.JobParameters != null &&
                    this.JobParameters.SequenceEqual(input.JobParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsJobAvailable != null)
                    hashCode = hashCode * 59 + this.IsJobAvailable.GetHashCode();
                if (this.AssignedJob != null)
                    hashCode = hashCode * 59 + this.AssignedJob.GetHashCode();
                if (this.JobParameters != null)
                    hashCode = hashCode * 59 + this.JobParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
