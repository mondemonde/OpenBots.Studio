/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// Organization
    /// </summary>
    [DataContract]
        public partial class Organization :  IEquatable<Organization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="isPublic">isPublic (default to false).</param>
        /// <param name="isVisibleToEmailDomain">isVisibleToEmailDomain (default to false).</param>
        /// <param name="eMailDomain">eMailDomain.</param>
        /// <param name="privateKey">privateKey.</param>
        /// <param name="salt">salt.</param>
        /// <param name="processKeyNumber">processKeyNumber.</param>
        /// <param name="processKeyPrefix">processKeyPrefix.</param>
        /// <param name="units">units.</param>
        /// <param name="accessRequests">accessRequests.</param>
        /// <param name="members">members.</param>
        /// <param name="settings">settings.</param>
        /// <param name="myProperty">myProperty.</param>
        /// <param name="allowedStorageInBytes">allowedStorageInBytes.</param>
        /// <param name="storageUsedInBytes">storageUsedInBytes.</param>
        /// <param name="isDocumentStorageEnabled">isDocumentStorageEnabled.</param>
        /// <param name="isDocumentStorageQuotaFull">isDocumentStorageQuotaFull.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="id">id.</param>
        /// <param name="isDeleted">isDeleted (default to false).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deleteOn">deleteOn.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="updatedOn">updatedOn.</param>
        /// <param name="updatedBy">updatedBy.</param>
        public Organization(string name = default(string), string description = default(string), bool? isPublic = false, bool? isVisibleToEmailDomain = false, string eMailDomain = default(string), string privateKey = default(string), string salt = default(string), int? processKeyNumber = default(int?), string processKeyPrefix = default(string), List<OrganizationUnit> units = default(List<OrganizationUnit>), List<AccessRequest> accessRequests = default(List<AccessRequest>), List<OrganizationMember> members = default(List<OrganizationMember>), List<OrganizationSetting> settings = default(List<OrganizationSetting>), int? myProperty = default(int?), double? allowedStorageInBytes = default(double?), double? storageUsedInBytes = default(double?), bool? isDocumentStorageEnabled = default(bool?), bool? isDocumentStorageQuotaFull = default(bool?), Guid? organizationId = default(Guid?), Guid? id = default(Guid?), bool? isDeleted = false, string createdBy = default(string), DateTime? createdOn = default(DateTime?), string deletedBy = default(string), DateTime? deleteOn = default(DateTime?), byte[] timestamp = default(byte[]), DateTime? updatedOn = default(DateTime?), string updatedBy = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Organization and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Description = description;
            // use default value if no "isPublic" provided
            if (isPublic == null)
            {
                this.IsPublic = false;
            }
            else
            {
                this.IsPublic = isPublic;
            }
            // use default value if no "isVisibleToEmailDomain" provided
            if (isVisibleToEmailDomain == null)
            {
                this.IsVisibleToEmailDomain = false;
            }
            else
            {
                this.IsVisibleToEmailDomain = isVisibleToEmailDomain;
            }
            this.EMailDomain = eMailDomain;
            this.PrivateKey = privateKey;
            this.Salt = salt;
            this.ProcessKeyNumber = processKeyNumber;
            this.ProcessKeyPrefix = processKeyPrefix;
            this.Units = units;
            this.AccessRequests = accessRequests;
            this.Members = members;
            this.Settings = settings;
            this.MyProperty = myProperty;
            this.AllowedStorageInBytes = allowedStorageInBytes;
            this.StorageUsedInBytes = storageUsedInBytes;
            this.IsDocumentStorageEnabled = isDocumentStorageEnabled;
            this.IsDocumentStorageQuotaFull = isDocumentStorageQuotaFull;
            this.OrganizationId = organizationId;
            this.Id = id;
            // use default value if no "isDeleted" provided
            if (isDeleted == null)
            {
                this.IsDeleted = false;
            }
            else
            {
                this.IsDeleted = isDeleted;
            }
            this.CreatedBy = createdBy;
            this.CreatedOn = createdOn;
            this.DeletedBy = deletedBy;
            this.DeleteOn = deleteOn;
            this.Timestamp = timestamp;
            this.UpdatedOn = updatedOn;
            this.UpdatedBy = updatedBy;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets IsVisibleToEmailDomain
        /// </summary>
        [DataMember(Name="isVisibleToEmailDomain", EmitDefaultValue=false)]
        public bool? IsVisibleToEmailDomain { get; set; }

        /// <summary>
        /// Gets or Sets EMailDomain
        /// </summary>
        [DataMember(Name="eMailDomain", EmitDefaultValue=false)]
        public string EMailDomain { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKey
        /// </summary>
        [DataMember(Name="privateKey", EmitDefaultValue=false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets Salt
        /// </summary>
        [DataMember(Name="salt", EmitDefaultValue=false)]
        public string Salt { get; set; }

        /// <summary>
        /// Gets or Sets ProcessKeyNumber
        /// </summary>
        [DataMember(Name="processKeyNumber", EmitDefaultValue=false)]
        public int? ProcessKeyNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProcessKeyPrefix
        /// </summary>
        [DataMember(Name="processKeyPrefix", EmitDefaultValue=false)]
        public string ProcessKeyPrefix { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public List<OrganizationUnit> Units { get; set; }

        /// <summary>
        /// Gets or Sets AccessRequests
        /// </summary>
        [DataMember(Name="accessRequests", EmitDefaultValue=false)]
        public List<AccessRequest> AccessRequests { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<OrganizationMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<OrganizationSetting> Settings { get; set; }

        /// <summary>
        /// Gets or Sets MyProperty
        /// </summary>
        [DataMember(Name="myProperty", EmitDefaultValue=false)]
        public int? MyProperty { get; set; }

        /// <summary>
        /// Gets or Sets AllowedStorageInBytes
        /// </summary>
        [DataMember(Name="allowedStorageInBytes", EmitDefaultValue=false)]
        public double? AllowedStorageInBytes { get; set; }

        /// <summary>
        /// Gets or Sets StorageUsedInBytes
        /// </summary>
        [DataMember(Name="storageUsedInBytes", EmitDefaultValue=false)]
        public double? StorageUsedInBytes { get; set; }

        /// <summary>
        /// Gets or Sets IsDocumentStorageEnabled
        /// </summary>
        [DataMember(Name="isDocumentStorageEnabled", EmitDefaultValue=false)]
        public bool? IsDocumentStorageEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsDocumentStorageQuotaFull
        /// </summary>
        [DataMember(Name="isDocumentStorageQuotaFull", EmitDefaultValue=false)]
        public bool? IsDocumentStorageQuotaFull { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=false)]
        public string DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeleteOn
        /// </summary>
        [DataMember(Name="deleteOn", EmitDefaultValue=false)]
        public DateTime? DeleteOn { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedOn
        /// </summary>
        [DataMember(Name="updatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Organization {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsVisibleToEmailDomain: ").Append(IsVisibleToEmailDomain).Append("\n");
            sb.Append("  EMailDomain: ").Append(EMailDomain).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  ProcessKeyNumber: ").Append(ProcessKeyNumber).Append("\n");
            sb.Append("  ProcessKeyPrefix: ").Append(ProcessKeyPrefix).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  AccessRequests: ").Append(AccessRequests).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  MyProperty: ").Append(MyProperty).Append("\n");
            sb.Append("  AllowedStorageInBytes: ").Append(AllowedStorageInBytes).Append("\n");
            sb.Append("  StorageUsedInBytes: ").Append(StorageUsedInBytes).Append("\n");
            sb.Append("  IsDocumentStorageEnabled: ").Append(IsDocumentStorageEnabled).Append("\n");
            sb.Append("  IsDocumentStorageQuotaFull: ").Append(IsDocumentStorageQuotaFull).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeleteOn: ").Append(DeleteOn).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Organization);
        }

        /// <summary>
        /// Returns true if Organization instances are equal
        /// </summary>
        /// <param name="input">Instance of Organization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsVisibleToEmailDomain == input.IsVisibleToEmailDomain ||
                    (this.IsVisibleToEmailDomain != null &&
                    this.IsVisibleToEmailDomain.Equals(input.IsVisibleToEmailDomain))
                ) && 
                (
                    this.EMailDomain == input.EMailDomain ||
                    (this.EMailDomain != null &&
                    this.EMailDomain.Equals(input.EMailDomain))
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.Salt == input.Salt ||
                    (this.Salt != null &&
                    this.Salt.Equals(input.Salt))
                ) && 
                (
                    this.ProcessKeyNumber == input.ProcessKeyNumber ||
                    (this.ProcessKeyNumber != null &&
                    this.ProcessKeyNumber.Equals(input.ProcessKeyNumber))
                ) && 
                (
                    this.ProcessKeyPrefix == input.ProcessKeyPrefix ||
                    (this.ProcessKeyPrefix != null &&
                    this.ProcessKeyPrefix.Equals(input.ProcessKeyPrefix))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units != null &&
                    input.Units != null &&
                    this.Units.SequenceEqual(input.Units)
                ) && 
                (
                    this.AccessRequests == input.AccessRequests ||
                    this.AccessRequests != null &&
                    input.AccessRequests != null &&
                    this.AccessRequests.SequenceEqual(input.AccessRequests)
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                ) && 
                (
                    this.Settings == input.Settings ||
                    this.Settings != null &&
                    input.Settings != null &&
                    this.Settings.SequenceEqual(input.Settings)
                ) && 
                (
                    this.MyProperty == input.MyProperty ||
                    (this.MyProperty != null &&
                    this.MyProperty.Equals(input.MyProperty))
                ) && 
                (
                    this.AllowedStorageInBytes == input.AllowedStorageInBytes ||
                    (this.AllowedStorageInBytes != null &&
                    this.AllowedStorageInBytes.Equals(input.AllowedStorageInBytes))
                ) && 
                (
                    this.StorageUsedInBytes == input.StorageUsedInBytes ||
                    (this.StorageUsedInBytes != null &&
                    this.StorageUsedInBytes.Equals(input.StorageUsedInBytes))
                ) && 
                (
                    this.IsDocumentStorageEnabled == input.IsDocumentStorageEnabled ||
                    (this.IsDocumentStorageEnabled != null &&
                    this.IsDocumentStorageEnabled.Equals(input.IsDocumentStorageEnabled))
                ) && 
                (
                    this.IsDocumentStorageQuotaFull == input.IsDocumentStorageQuotaFull ||
                    (this.IsDocumentStorageQuotaFull != null &&
                    this.IsDocumentStorageQuotaFull.Equals(input.IsDocumentStorageQuotaFull))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeleteOn == input.DeleteOn ||
                    (this.DeleteOn != null &&
                    this.DeleteOn.Equals(input.DeleteOn))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    (this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(input.UpdatedOn))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsVisibleToEmailDomain != null)
                    hashCode = hashCode * 59 + this.IsVisibleToEmailDomain.GetHashCode();
                if (this.EMailDomain != null)
                    hashCode = hashCode * 59 + this.EMailDomain.GetHashCode();
                if (this.PrivateKey != null)
                    hashCode = hashCode * 59 + this.PrivateKey.GetHashCode();
                if (this.Salt != null)
                    hashCode = hashCode * 59 + this.Salt.GetHashCode();
                if (this.ProcessKeyNumber != null)
                    hashCode = hashCode * 59 + this.ProcessKeyNumber.GetHashCode();
                if (this.ProcessKeyPrefix != null)
                    hashCode = hashCode * 59 + this.ProcessKeyPrefix.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.AccessRequests != null)
                    hashCode = hashCode * 59 + this.AccessRequests.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.MyProperty != null)
                    hashCode = hashCode * 59 + this.MyProperty.GetHashCode();
                if (this.AllowedStorageInBytes != null)
                    hashCode = hashCode * 59 + this.AllowedStorageInBytes.GetHashCode();
                if (this.StorageUsedInBytes != null)
                    hashCode = hashCode * 59 + this.StorageUsedInBytes.GetHashCode();
                if (this.IsDocumentStorageEnabled != null)
                    hashCode = hashCode * 59 + this.IsDocumentStorageEnabled.GetHashCode();
                if (this.IsDocumentStorageQuotaFull != null)
                    hashCode = hashCode * 59 + this.IsDocumentStorageQuotaFull.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeleteOn != null)
                    hashCode = hashCode * 59 + this.DeleteOn.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.UpdatedOn != null)
                    hashCode = hashCode * 59 + this.UpdatedOn.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
