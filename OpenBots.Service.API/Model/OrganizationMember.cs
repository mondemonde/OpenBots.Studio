/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// OrganizationMember
    /// </summary>
    [DataContract]
        public partial class OrganizationMember :  IEquatable<OrganizationMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMember" /> class.
        /// </summary>
        /// <param name="organizationId">organizationId (required).</param>
        /// <param name="personId">personId (required).</param>
        /// <param name="isAdministrator">isAdministrator (default to false).</param>
        /// <param name="approvedBy">approvedBy.</param>
        /// <param name="approvedOn">approvedOn.</param>
        /// <param name="isInvited">isInvited (default to false).</param>
        /// <param name="invitedBy">invitedBy.</param>
        /// <param name="invitedOn">invitedOn.</param>
        /// <param name="inviteAccepted">inviteAccepted (default to false).</param>
        /// <param name="inviteAcceptedOn">inviteAcceptedOn.</param>
        /// <param name="isAutoApprovedByEmailAddress">isAutoApprovedByEmailAddress (default to false).</param>
        /// <param name="person">person.</param>
        /// <param name="id">id.</param>
        /// <param name="isDeleted">isDeleted (default to false).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deleteOn">deleteOn.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="updatedOn">updatedOn.</param>
        /// <param name="updatedBy">updatedBy.</param>
        public OrganizationMember(Guid? organizationId = default(Guid?), Guid? personId = default(Guid?), bool? isAdministrator = false, string approvedBy = default(string), DateTime? approvedOn = default(DateTime?), bool? isInvited = false, string invitedBy = default(string), DateTime? invitedOn = default(DateTime?), bool? inviteAccepted = false, DateTime? inviteAcceptedOn = default(DateTime?), bool? isAutoApprovedByEmailAddress = false, Person person = default(Person), Guid? id = default(Guid?), bool? isDeleted = false, string createdBy = default(string), DateTime? createdOn = default(DateTime?), string deletedBy = default(string), DateTime? deleteOn = default(DateTime?), byte[] timestamp = default(byte[]), DateTime? updatedOn = default(DateTime?), string updatedBy = default(string))
        {
            // to ensure "organizationId" is required (not null)
            if (organizationId == null)
            {
                throw new InvalidDataException("organizationId is a required property for OrganizationMember and cannot be null");
            }
            else
            {
                this.OrganizationId = organizationId;
            }
            // to ensure "personId" is required (not null)
            if (personId == null)
            {
                throw new InvalidDataException("personId is a required property for OrganizationMember and cannot be null");
            }
            else
            {
                this.PersonId = personId;
            }
            // use default value if no "isAdministrator" provided
            if (isAdministrator == null)
            {
                this.IsAdministrator = false;
            }
            else
            {
                this.IsAdministrator = isAdministrator;
            }
            this.ApprovedBy = approvedBy;
            this.ApprovedOn = approvedOn;
            // use default value if no "isInvited" provided
            if (isInvited == null)
            {
                this.IsInvited = false;
            }
            else
            {
                this.IsInvited = isInvited;
            }
            this.InvitedBy = invitedBy;
            this.InvitedOn = invitedOn;
            // use default value if no "inviteAccepted" provided
            if (inviteAccepted == null)
            {
                this.InviteAccepted = false;
            }
            else
            {
                this.InviteAccepted = inviteAccepted;
            }
            this.InviteAcceptedOn = inviteAcceptedOn;
            // use default value if no "isAutoApprovedByEmailAddress" provided
            if (isAutoApprovedByEmailAddress == null)
            {
                this.IsAutoApprovedByEmailAddress = false;
            }
            else
            {
                this.IsAutoApprovedByEmailAddress = isAutoApprovedByEmailAddress;
            }
            this.Person = person;
            this.Id = id;
            // use default value if no "isDeleted" provided
            if (isDeleted == null)
            {
                this.IsDeleted = false;
            }
            else
            {
                this.IsDeleted = isDeleted;
            }
            this.CreatedBy = createdBy;
            this.CreatedOn = createdOn;
            this.DeletedBy = deletedBy;
            this.DeleteOn = deleteOn;
            this.Timestamp = timestamp;
            this.UpdatedOn = updatedOn;
            this.UpdatedBy = updatedBy;
        }
        
        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public Guid? PersonId { get; set; }

        /// <summary>
        /// Gets or Sets IsAdministrator
        /// </summary>
        [DataMember(Name="isAdministrator", EmitDefaultValue=false)]
        public bool? IsAdministrator { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name="approvedBy", EmitDefaultValue=false)]
        public string ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedOn
        /// </summary>
        [DataMember(Name="approvedOn", EmitDefaultValue=false)]
        public DateTime? ApprovedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsInvited
        /// </summary>
        [DataMember(Name="isInvited", EmitDefaultValue=false)]
        public bool? IsInvited { get; set; }

        /// <summary>
        /// Gets or Sets InvitedBy
        /// </summary>
        [DataMember(Name="invitedBy", EmitDefaultValue=false)]
        public string InvitedBy { get; set; }

        /// <summary>
        /// Gets or Sets InvitedOn
        /// </summary>
        [DataMember(Name="invitedOn", EmitDefaultValue=false)]
        public DateTime? InvitedOn { get; set; }

        /// <summary>
        /// Gets or Sets InviteAccepted
        /// </summary>
        [DataMember(Name="inviteAccepted", EmitDefaultValue=false)]
        public bool? InviteAccepted { get; set; }

        /// <summary>
        /// Gets or Sets InviteAcceptedOn
        /// </summary>
        [DataMember(Name="inviteAcceptedOn", EmitDefaultValue=false)]
        public DateTime? InviteAcceptedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsAutoApprovedByEmailAddress
        /// </summary>
        [DataMember(Name="isAutoApprovedByEmailAddress", EmitDefaultValue=false)]
        public bool? IsAutoApprovedByEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public Person Person { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=false)]
        public string DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeleteOn
        /// </summary>
        [DataMember(Name="deleteOn", EmitDefaultValue=false)]
        public DateTime? DeleteOn { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedOn
        /// </summary>
        [DataMember(Name="updatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationMember {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  IsAdministrator: ").Append(IsAdministrator).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  ApprovedOn: ").Append(ApprovedOn).Append("\n");
            sb.Append("  IsInvited: ").Append(IsInvited).Append("\n");
            sb.Append("  InvitedBy: ").Append(InvitedBy).Append("\n");
            sb.Append("  InvitedOn: ").Append(InvitedOn).Append("\n");
            sb.Append("  InviteAccepted: ").Append(InviteAccepted).Append("\n");
            sb.Append("  InviteAcceptedOn: ").Append(InviteAcceptedOn).Append("\n");
            sb.Append("  IsAutoApprovedByEmailAddress: ").Append(IsAutoApprovedByEmailAddress).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeleteOn: ").Append(DeleteOn).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationMember);
        }

        /// <summary>
        /// Returns true if OrganizationMember instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.IsAdministrator == input.IsAdministrator ||
                    (this.IsAdministrator != null &&
                    this.IsAdministrator.Equals(input.IsAdministrator))
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && 
                (
                    this.ApprovedOn == input.ApprovedOn ||
                    (this.ApprovedOn != null &&
                    this.ApprovedOn.Equals(input.ApprovedOn))
                ) && 
                (
                    this.IsInvited == input.IsInvited ||
                    (this.IsInvited != null &&
                    this.IsInvited.Equals(input.IsInvited))
                ) && 
                (
                    this.InvitedBy == input.InvitedBy ||
                    (this.InvitedBy != null &&
                    this.InvitedBy.Equals(input.InvitedBy))
                ) && 
                (
                    this.InvitedOn == input.InvitedOn ||
                    (this.InvitedOn != null &&
                    this.InvitedOn.Equals(input.InvitedOn))
                ) && 
                (
                    this.InviteAccepted == input.InviteAccepted ||
                    (this.InviteAccepted != null &&
                    this.InviteAccepted.Equals(input.InviteAccepted))
                ) && 
                (
                    this.InviteAcceptedOn == input.InviteAcceptedOn ||
                    (this.InviteAcceptedOn != null &&
                    this.InviteAcceptedOn.Equals(input.InviteAcceptedOn))
                ) && 
                (
                    this.IsAutoApprovedByEmailAddress == input.IsAutoApprovedByEmailAddress ||
                    (this.IsAutoApprovedByEmailAddress != null &&
                    this.IsAutoApprovedByEmailAddress.Equals(input.IsAutoApprovedByEmailAddress))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeleteOn == input.DeleteOn ||
                    (this.DeleteOn != null &&
                    this.DeleteOn.Equals(input.DeleteOn))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    (this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(input.UpdatedOn))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.PersonId != null)
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                if (this.IsAdministrator != null)
                    hashCode = hashCode * 59 + this.IsAdministrator.GetHashCode();
                if (this.ApprovedBy != null)
                    hashCode = hashCode * 59 + this.ApprovedBy.GetHashCode();
                if (this.ApprovedOn != null)
                    hashCode = hashCode * 59 + this.ApprovedOn.GetHashCode();
                if (this.IsInvited != null)
                    hashCode = hashCode * 59 + this.IsInvited.GetHashCode();
                if (this.InvitedBy != null)
                    hashCode = hashCode * 59 + this.InvitedBy.GetHashCode();
                if (this.InvitedOn != null)
                    hashCode = hashCode * 59 + this.InvitedOn.GetHashCode();
                if (this.InviteAccepted != null)
                    hashCode = hashCode * 59 + this.InviteAccepted.GetHashCode();
                if (this.InviteAcceptedOn != null)
                    hashCode = hashCode * 59 + this.InviteAcceptedOn.GetHashCode();
                if (this.IsAutoApprovedByEmailAddress != null)
                    hashCode = hashCode * 59 + this.IsAutoApprovedByEmailAddress.GetHashCode();
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeleteOn != null)
                    hashCode = hashCode * 59 + this.DeleteOn.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.UpdatedOn != null)
                    hashCode = hashCode * 59 + this.UpdatedOn.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
