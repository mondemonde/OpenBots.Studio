/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// OrganizationSetting
    /// </summary>
    [DataContract]
        public partial class OrganizationSetting :  IEquatable<OrganizationSetting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSetting" /> class.
        /// </summary>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="businesProcessKeyPrefix">businesProcessKeyPrefix.</param>
        /// <param name="businessProcessPrioritiesCSV">businessProcessPrioritiesCSV.</param>
        /// <param name="businessProcessStatusCSV">businessProcessStatusCSV.</param>
        /// <param name="organization">organization.</param>
        /// <param name="smtpConfiguration">smtpConfiguration.</param>
        /// <param name="timeZone">timeZone.</param>
        /// <param name="storageLocation">storageLocation.</param>
        /// <param name="id">id.</param>
        /// <param name="isDeleted">isDeleted (default to false).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deleteOn">deleteOn.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="updatedOn">updatedOn.</param>
        /// <param name="updatedBy">updatedBy.</param>
        public OrganizationSetting(Guid? organizationId = default(Guid?), string businesProcessKeyPrefix = default(string), string businessProcessPrioritiesCSV = default(string), string businessProcessStatusCSV = default(string), Organization organization = default(Organization), string smtpConfiguration = default(string), string timeZone = default(string), string storageLocation = default(string), Guid? id = default(Guid?), bool? isDeleted = false, string createdBy = default(string), DateTime? createdOn = default(DateTime?), string deletedBy = default(string), DateTime? deleteOn = default(DateTime?), byte[] timestamp = default(byte[]), DateTime? updatedOn = default(DateTime?), string updatedBy = default(string))
        {
            this.OrganizationId = organizationId;
            this.BusinesProcessKeyPrefix = businesProcessKeyPrefix;
            this.BusinessProcessPrioritiesCSV = businessProcessPrioritiesCSV;
            this.BusinessProcessStatusCSV = businessProcessStatusCSV;
            this.Organization = organization;
            this.SmtpConfiguration = smtpConfiguration;
            this.TimeZone = timeZone;
            this.StorageLocation = storageLocation;
            this.Id = id;
            // use default value if no "isDeleted" provided
            if (isDeleted == null)
            {
                this.IsDeleted = false;
            }
            else
            {
                this.IsDeleted = isDeleted;
            }
            this.CreatedBy = createdBy;
            this.CreatedOn = createdOn;
            this.DeletedBy = deletedBy;
            this.DeleteOn = deleteOn;
            this.Timestamp = timestamp;
            this.UpdatedOn = updatedOn;
            this.UpdatedBy = updatedBy;
        }
        
        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets BusinesProcessKeyPrefix
        /// </summary>
        [DataMember(Name="businesProcessKeyPrefix", EmitDefaultValue=false)]
        public string BusinesProcessKeyPrefix { get; set; }

        /// <summary>
        /// Gets or Sets BusinessProcessPrioritiesCSV
        /// </summary>
        [DataMember(Name="businessProcessPrioritiesCSV", EmitDefaultValue=false)]
        public string BusinessProcessPrioritiesCSV { get; set; }

        /// <summary>
        /// Gets or Sets BusinessProcessStatusCSV
        /// </summary>
        [DataMember(Name="businessProcessStatusCSV", EmitDefaultValue=false)]
        public string BusinessProcessStatusCSV { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public Organization Organization { get; set; }

        /// <summary>
        /// Gets or Sets SmtpConfiguration
        /// </summary>
        [DataMember(Name="smtpConfiguration", EmitDefaultValue=false)]
        public string SmtpConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets StorageLocation
        /// </summary>
        [DataMember(Name="storageLocation", EmitDefaultValue=false)]
        public string StorageLocation { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=false)]
        public string DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeleteOn
        /// </summary>
        [DataMember(Name="deleteOn", EmitDefaultValue=false)]
        public DateTime? DeleteOn { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedOn
        /// </summary>
        [DataMember(Name="updatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationSetting {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  BusinesProcessKeyPrefix: ").Append(BusinesProcessKeyPrefix).Append("\n");
            sb.Append("  BusinessProcessPrioritiesCSV: ").Append(BusinessProcessPrioritiesCSV).Append("\n");
            sb.Append("  BusinessProcessStatusCSV: ").Append(BusinessProcessStatusCSV).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  SmtpConfiguration: ").Append(SmtpConfiguration).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  StorageLocation: ").Append(StorageLocation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeleteOn: ").Append(DeleteOn).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationSetting);
        }

        /// <summary>
        /// Returns true if OrganizationSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.BusinesProcessKeyPrefix == input.BusinesProcessKeyPrefix ||
                    (this.BusinesProcessKeyPrefix != null &&
                    this.BusinesProcessKeyPrefix.Equals(input.BusinesProcessKeyPrefix))
                ) && 
                (
                    this.BusinessProcessPrioritiesCSV == input.BusinessProcessPrioritiesCSV ||
                    (this.BusinessProcessPrioritiesCSV != null &&
                    this.BusinessProcessPrioritiesCSV.Equals(input.BusinessProcessPrioritiesCSV))
                ) && 
                (
                    this.BusinessProcessStatusCSV == input.BusinessProcessStatusCSV ||
                    (this.BusinessProcessStatusCSV != null &&
                    this.BusinessProcessStatusCSV.Equals(input.BusinessProcessStatusCSV))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.SmtpConfiguration == input.SmtpConfiguration ||
                    (this.SmtpConfiguration != null &&
                    this.SmtpConfiguration.Equals(input.SmtpConfiguration))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.StorageLocation == input.StorageLocation ||
                    (this.StorageLocation != null &&
                    this.StorageLocation.Equals(input.StorageLocation))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeleteOn == input.DeleteOn ||
                    (this.DeleteOn != null &&
                    this.DeleteOn.Equals(input.DeleteOn))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    (this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(input.UpdatedOn))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.BusinesProcessKeyPrefix != null)
                    hashCode = hashCode * 59 + this.BusinesProcessKeyPrefix.GetHashCode();
                if (this.BusinessProcessPrioritiesCSV != null)
                    hashCode = hashCode * 59 + this.BusinessProcessPrioritiesCSV.GetHashCode();
                if (this.BusinessProcessStatusCSV != null)
                    hashCode = hashCode * 59 + this.BusinessProcessStatusCSV.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                if (this.SmtpConfiguration != null)
                    hashCode = hashCode * 59 + this.SmtpConfiguration.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.StorageLocation != null)
                    hashCode = hashCode * 59 + this.StorageLocation.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeleteOn != null)
                    hashCode = hashCode * 59 + this.DeleteOn.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.UpdatedOn != null)
                    hashCode = hashCode * 59 + this.UpdatedOn.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
