/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// QueueItemDequeueDto
    /// </summary>
    [DataContract]
        public partial class QueueItemDequeueDto :  IEquatable<QueueItemDequeueDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemDequeueDto" /> class.
        /// </summary>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="processID">processID.</param>
        /// <param name="name">name.</param>
        /// <param name="subtopic">subtopic.</param>
        /// <param name="_event">_event.</param>
        /// <param name="source">source.</param>
        /// <param name="priority">priority.</param>
        /// <param name="queueItemType">queueItemType.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="entityStatus">entityStatus.</param>
        /// <param name="dataJSON">dataJSON.</param>
        /// <param name="dataText">dataText.</param>
        /// <param name="dontDequeueUntil">dontDequeueUntil.</param>
        /// <param name="dontDequeueAfter">dontDequeueAfter.</param>
        /// <param name="isDequeued">isDequeued.</param>
        /// <param name="isLocked">isLocked.</param>
        /// <param name="lockedOn">lockedOn.</param>
        /// <param name="lockedUntil">lockedUntil.</param>
        /// <param name="lockedBy">lockedBy.</param>
        /// <param name="lockTransactionKey">lockTransactionKey.</param>
        /// <param name="retryCount">retryCount.</param>
        /// <param name="lastOccuredError">lastOccuredError.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="isError">isError.</param>
        /// <param name="isItemAvailable">isItemAvailable.</param>
        /// <param name="retryAttempt">retryAttempt.</param>
        /// <param name="transactionKey">transactionKey.</param>
        /// <param name="appQueueItemId">appQueueItemId.</param>
        /// <param name="item">item.</param>
        /// <param name="queueId">queueId.</param>
        public QueueItemDequeueDto(Guid? organizationId = default(Guid?), Guid? processID = default(Guid?), string name = default(string), string subtopic = default(string), string _event = default(string), string source = default(string), int? priority = default(int?), string queueItemType = default(string), string entityType = default(string), string entityStatus = default(string), string dataJSON = default(string), string dataText = default(string), DateTime? dontDequeueUntil = default(DateTime?), DateTime? dontDequeueAfter = default(DateTime?), bool? isDequeued = default(bool?), bool? isLocked = default(bool?), DateTime? lockedOn = default(DateTime?), DateTime? lockedUntil = default(DateTime?), string lockedBy = default(string), Guid? lockTransactionKey = default(Guid?), int? retryCount = default(int?), string lastOccuredError = default(string), byte[] timestamp = default(byte[]), bool? isError = default(bool?), bool? isItemAvailable = default(bool?), int? retryAttempt = default(int?), Guid? transactionKey = default(Guid?), Guid? appQueueItemId = default(Guid?), QueueItem item = default(QueueItem), Guid? queueId = default(Guid?))
        {
            this.OrganizationId = organizationId;
            this.ProcessID = processID;
            this.Name = name;
            this.Subtopic = subtopic;
            this.Event = _event;
            this.Source = source;
            this.Priority = priority;
            this.QueueItemType = queueItemType;
            this.EntityType = entityType;
            this.EntityStatus = entityStatus;
            this.DataJSON = dataJSON;
            this.DataText = dataText;
            this.DontDequeueUntil = dontDequeueUntil;
            this.DontDequeueAfter = dontDequeueAfter;
            this.IsDequeued = isDequeued;
            this.IsLocked = isLocked;
            this.LockedOn = lockedOn;
            this.LockedUntil = lockedUntil;
            this.LockedBy = lockedBy;
            this.LockTransactionKey = lockTransactionKey;
            this.RetryCount = retryCount;
            this.LastOccuredError = lastOccuredError;
            this.Timestamp = timestamp;
            this.IsError = isError;
            this.IsItemAvailable = isItemAvailable;
            this.RetryAttempt = retryAttempt;
            this.TransactionKey = transactionKey;
            this.AppQueueItemId = appQueueItemId;
            this.Item = item;
            this.QueueId = queueId;
        }
        
        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessID
        /// </summary>
        [DataMember(Name="processID", EmitDefaultValue=false)]
        public Guid? ProcessID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Subtopic
        /// </summary>
        [DataMember(Name="subtopic", EmitDefaultValue=false)]
        public string Subtopic { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string Event { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets QueueItemType
        /// </summary>
        [DataMember(Name="queueItemType", EmitDefaultValue=false)]
        public string QueueItemType { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets EntityStatus
        /// </summary>
        [DataMember(Name="entityStatus", EmitDefaultValue=false)]
        public string EntityStatus { get; set; }

        /// <summary>
        /// Gets or Sets DataJSON
        /// </summary>
        [DataMember(Name="dataJSON", EmitDefaultValue=false)]
        public string DataJSON { get; set; }

        /// <summary>
        /// Gets or Sets DataText
        /// </summary>
        [DataMember(Name="dataText", EmitDefaultValue=false)]
        public string DataText { get; set; }

        /// <summary>
        /// Gets or Sets DontDequeueUntil
        /// </summary>
        [DataMember(Name="dontDequeueUntil", EmitDefaultValue=false)]
        public DateTime? DontDequeueUntil { get; set; }

        /// <summary>
        /// Gets or Sets DontDequeueAfter
        /// </summary>
        [DataMember(Name="dontDequeueAfter", EmitDefaultValue=false)]
        public DateTime? DontDequeueAfter { get; set; }

        /// <summary>
        /// Gets or Sets IsDequeued
        /// </summary>
        [DataMember(Name="isDequeued", EmitDefaultValue=false)]
        public bool? IsDequeued { get; set; }

        /// <summary>
        /// Gets or Sets IsLocked
        /// </summary>
        [DataMember(Name="isLocked", EmitDefaultValue=false)]
        public bool? IsLocked { get; set; }

        /// <summary>
        /// Gets or Sets LockedOn
        /// </summary>
        [DataMember(Name="lockedOn", EmitDefaultValue=false)]
        public DateTime? LockedOn { get; set; }

        /// <summary>
        /// Gets or Sets LockedUntil
        /// </summary>
        [DataMember(Name="lockedUntil", EmitDefaultValue=false)]
        public DateTime? LockedUntil { get; set; }

        /// <summary>
        /// Gets or Sets LockedBy
        /// </summary>
        [DataMember(Name="lockedBy", EmitDefaultValue=false)]
        public string LockedBy { get; set; }

        /// <summary>
        /// Gets or Sets LockTransactionKey
        /// </summary>
        [DataMember(Name="lockTransactionKey", EmitDefaultValue=false)]
        public Guid? LockTransactionKey { get; set; }

        /// <summary>
        /// Gets or Sets RetryCount
        /// </summary>
        [DataMember(Name="retryCount", EmitDefaultValue=false)]
        public int? RetryCount { get; set; }

        /// <summary>
        /// Gets or Sets LastOccuredError
        /// </summary>
        [DataMember(Name="lastOccuredError", EmitDefaultValue=false)]
        public string LastOccuredError { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets IsError
        /// </summary>
        [DataMember(Name="isError", EmitDefaultValue=false)]
        public bool? IsError { get; set; }

        /// <summary>
        /// Gets or Sets IsItemAvailable
        /// </summary>
        [DataMember(Name="isItemAvailable", EmitDefaultValue=false)]
        public bool? IsItemAvailable { get; set; }

        /// <summary>
        /// Gets or Sets RetryAttempt
        /// </summary>
        [DataMember(Name="retryAttempt", EmitDefaultValue=false)]
        public int? RetryAttempt { get; set; }

        /// <summary>
        /// Gets or Sets TransactionKey
        /// </summary>
        [DataMember(Name="transactionKey", EmitDefaultValue=false)]
        public Guid? TransactionKey { get; set; }

        /// <summary>
        /// Gets or Sets AppQueueItemId
        /// </summary>
        [DataMember(Name="appQueueItemId", EmitDefaultValue=false)]
        public Guid? AppQueueItemId { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="item", EmitDefaultValue=false)]
        public QueueItem Item { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="queueId", EmitDefaultValue=false)]
        public Guid? QueueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueItemDequeueDto {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ProcessID: ").Append(ProcessID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subtopic: ").Append(Subtopic).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  QueueItemType: ").Append(QueueItemType).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityStatus: ").Append(EntityStatus).Append("\n");
            sb.Append("  DataJSON: ").Append(DataJSON).Append("\n");
            sb.Append("  DataText: ").Append(DataText).Append("\n");
            sb.Append("  DontDequeueUntil: ").Append(DontDequeueUntil).Append("\n");
            sb.Append("  DontDequeueAfter: ").Append(DontDequeueAfter).Append("\n");
            sb.Append("  IsDequeued: ").Append(IsDequeued).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  LockedOn: ").Append(LockedOn).Append("\n");
            sb.Append("  LockedUntil: ").Append(LockedUntil).Append("\n");
            sb.Append("  LockedBy: ").Append(LockedBy).Append("\n");
            sb.Append("  LockTransactionKey: ").Append(LockTransactionKey).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  LastOccuredError: ").Append(LastOccuredError).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  IsError: ").Append(IsError).Append("\n");
            sb.Append("  IsItemAvailable: ").Append(IsItemAvailable).Append("\n");
            sb.Append("  RetryAttempt: ").Append(RetryAttempt).Append("\n");
            sb.Append("  TransactionKey: ").Append(TransactionKey).Append("\n");
            sb.Append("  AppQueueItemId: ").Append(AppQueueItemId).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueItemDequeueDto);
        }

        /// <summary>
        /// Returns true if QueueItemDequeueDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueItemDequeueDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueItemDequeueDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.ProcessID == input.ProcessID ||
                    (this.ProcessID != null &&
                    this.ProcessID.Equals(input.ProcessID))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Subtopic == input.Subtopic ||
                    (this.Subtopic != null &&
                    this.Subtopic.Equals(input.Subtopic))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.QueueItemType == input.QueueItemType ||
                    (this.QueueItemType != null &&
                    this.QueueItemType.Equals(input.QueueItemType))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityStatus == input.EntityStatus ||
                    (this.EntityStatus != null &&
                    this.EntityStatus.Equals(input.EntityStatus))
                ) && 
                (
                    this.DataJSON == input.DataJSON ||
                    (this.DataJSON != null &&
                    this.DataJSON.Equals(input.DataJSON))
                ) && 
                (
                    this.DataText == input.DataText ||
                    (this.DataText != null &&
                    this.DataText.Equals(input.DataText))
                ) && 
                (
                    this.DontDequeueUntil == input.DontDequeueUntil ||
                    (this.DontDequeueUntil != null &&
                    this.DontDequeueUntil.Equals(input.DontDequeueUntil))
                ) && 
                (
                    this.DontDequeueAfter == input.DontDequeueAfter ||
                    (this.DontDequeueAfter != null &&
                    this.DontDequeueAfter.Equals(input.DontDequeueAfter))
                ) && 
                (
                    this.IsDequeued == input.IsDequeued ||
                    (this.IsDequeued != null &&
                    this.IsDequeued.Equals(input.IsDequeued))
                ) && 
                (
                    this.IsLocked == input.IsLocked ||
                    (this.IsLocked != null &&
                    this.IsLocked.Equals(input.IsLocked))
                ) && 
                (
                    this.LockedOn == input.LockedOn ||
                    (this.LockedOn != null &&
                    this.LockedOn.Equals(input.LockedOn))
                ) && 
                (
                    this.LockedUntil == input.LockedUntil ||
                    (this.LockedUntil != null &&
                    this.LockedUntil.Equals(input.LockedUntil))
                ) && 
                (
                    this.LockedBy == input.LockedBy ||
                    (this.LockedBy != null &&
                    this.LockedBy.Equals(input.LockedBy))
                ) && 
                (
                    this.LockTransactionKey == input.LockTransactionKey ||
                    (this.LockTransactionKey != null &&
                    this.LockTransactionKey.Equals(input.LockTransactionKey))
                ) && 
                (
                    this.RetryCount == input.RetryCount ||
                    (this.RetryCount != null &&
                    this.RetryCount.Equals(input.RetryCount))
                ) && 
                (
                    this.LastOccuredError == input.LastOccuredError ||
                    (this.LastOccuredError != null &&
                    this.LastOccuredError.Equals(input.LastOccuredError))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.IsError == input.IsError ||
                    (this.IsError != null &&
                    this.IsError.Equals(input.IsError))
                ) && 
                (
                    this.IsItemAvailable == input.IsItemAvailable ||
                    (this.IsItemAvailable != null &&
                    this.IsItemAvailable.Equals(input.IsItemAvailable))
                ) && 
                (
                    this.RetryAttempt == input.RetryAttempt ||
                    (this.RetryAttempt != null &&
                    this.RetryAttempt.Equals(input.RetryAttempt))
                ) && 
                (
                    this.TransactionKey == input.TransactionKey ||
                    (this.TransactionKey != null &&
                    this.TransactionKey.Equals(input.TransactionKey))
                ) && 
                (
                    this.AppQueueItemId == input.AppQueueItemId ||
                    (this.AppQueueItemId != null &&
                    this.AppQueueItemId.Equals(input.AppQueueItemId))
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.QueueId == input.QueueId ||
                    (this.QueueId != null &&
                    this.QueueId.Equals(input.QueueId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.ProcessID != null)
                    hashCode = hashCode * 59 + this.ProcessID.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Subtopic != null)
                    hashCode = hashCode * 59 + this.Subtopic.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.QueueItemType != null)
                    hashCode = hashCode * 59 + this.QueueItemType.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntityStatus != null)
                    hashCode = hashCode * 59 + this.EntityStatus.GetHashCode();
                if (this.DataJSON != null)
                    hashCode = hashCode * 59 + this.DataJSON.GetHashCode();
                if (this.DataText != null)
                    hashCode = hashCode * 59 + this.DataText.GetHashCode();
                if (this.DontDequeueUntil != null)
                    hashCode = hashCode * 59 + this.DontDequeueUntil.GetHashCode();
                if (this.DontDequeueAfter != null)
                    hashCode = hashCode * 59 + this.DontDequeueAfter.GetHashCode();
                if (this.IsDequeued != null)
                    hashCode = hashCode * 59 + this.IsDequeued.GetHashCode();
                if (this.IsLocked != null)
                    hashCode = hashCode * 59 + this.IsLocked.GetHashCode();
                if (this.LockedOn != null)
                    hashCode = hashCode * 59 + this.LockedOn.GetHashCode();
                if (this.LockedUntil != null)
                    hashCode = hashCode * 59 + this.LockedUntil.GetHashCode();
                if (this.LockedBy != null)
                    hashCode = hashCode * 59 + this.LockedBy.GetHashCode();
                if (this.LockTransactionKey != null)
                    hashCode = hashCode * 59 + this.LockTransactionKey.GetHashCode();
                if (this.RetryCount != null)
                    hashCode = hashCode * 59 + this.RetryCount.GetHashCode();
                if (this.LastOccuredError != null)
                    hashCode = hashCode * 59 + this.LastOccuredError.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.IsError != null)
                    hashCode = hashCode * 59 + this.IsError.GetHashCode();
                if (this.IsItemAvailable != null)
                    hashCode = hashCode * 59 + this.IsItemAvailable.GetHashCode();
                if (this.RetryAttempt != null)
                    hashCode = hashCode * 59 + this.RetryAttempt.GetHashCode();
                if (this.TransactionKey != null)
                    hashCode = hashCode * 59 + this.TransactionKey.GetHashCode();
                if (this.AppQueueItemId != null)
                    hashCode = hashCode * 59 + this.AppQueueItemId.GetHashCode();
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.QueueId != null)
                    hashCode = hashCode * 59 + this.QueueId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
