/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// TeamMember
    /// </summary>
    [DataContract]
        public partial class TeamMember :  IEquatable<TeamMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMember" /> class.
        /// </summary>
        /// <param name="personId">personId.</param>
        /// <param name="organizationMemberId">organizationMemberId.</param>
        /// <param name="name">name.</param>
        /// <param name="userName">userName.</param>
        /// <param name="title">title.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="status">status.</param>
        /// <param name="joinedOn">joinedOn.</param>
        /// <param name="invitedBy">invitedBy.</param>
        /// <param name="isAdmin">isAdmin.</param>
        public TeamMember(Guid? personId = default(Guid?), Guid? organizationMemberId = default(Guid?), string name = default(string), string userName = default(string), string title = default(string), string emailAddress = default(string), string status = default(string), DateTime? joinedOn = default(DateTime?), string invitedBy = default(string), bool? isAdmin = default(bool?))
        {
            this.PersonId = personId;
            this.OrganizationMemberId = organizationMemberId;
            this.Name = name;
            this.UserName = userName;
            this.Title = title;
            this.EmailAddress = emailAddress;
            this.Status = status;
            this.JoinedOn = joinedOn;
            this.InvitedBy = invitedBy;
            this.IsAdmin = isAdmin;
        }
        
        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public Guid? PersonId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationMemberId
        /// </summary>
        [DataMember(Name="organizationMemberId", EmitDefaultValue=false)]
        public Guid? OrganizationMemberId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets JoinedOn
        /// </summary>
        [DataMember(Name="joinedOn", EmitDefaultValue=false)]
        public DateTime? JoinedOn { get; set; }

        /// <summary>
        /// Gets or Sets InvitedBy
        /// </summary>
        [DataMember(Name="invitedBy", EmitDefaultValue=false)]
        public string InvitedBy { get; set; }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name="isAdmin", EmitDefaultValue=false)]
        public bool? IsAdmin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamMember {\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  OrganizationMemberId: ").Append(OrganizationMemberId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  JoinedOn: ").Append(JoinedOn).Append("\n");
            sb.Append("  InvitedBy: ").Append(InvitedBy).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamMember);
        }

        /// <summary>
        /// Returns true if TeamMember instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.OrganizationMemberId == input.OrganizationMemberId ||
                    (this.OrganizationMemberId != null &&
                    this.OrganizationMemberId.Equals(input.OrganizationMemberId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.JoinedOn == input.JoinedOn ||
                    (this.JoinedOn != null &&
                    this.JoinedOn.Equals(input.JoinedOn))
                ) && 
                (
                    this.InvitedBy == input.InvitedBy ||
                    (this.InvitedBy != null &&
                    this.InvitedBy.Equals(input.InvitedBy))
                ) && 
                (
                    this.IsAdmin == input.IsAdmin ||
                    (this.IsAdmin != null &&
                    this.IsAdmin.Equals(input.IsAdmin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonId != null)
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                if (this.OrganizationMemberId != null)
                    hashCode = hashCode * 59 + this.OrganizationMemberId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.JoinedOn != null)
                    hashCode = hashCode * 59 + this.JoinedOn.GetHashCode();
                if (this.InvitedBy != null)
                    hashCode = hashCode * 59 + this.InvitedBy.GetHashCode();
                if (this.IsAdmin != null)
                    hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
